{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///statistical.min.js","webpack:///webpack/bootstrap 3566167229b454cfa20b","webpack:///./src/statistical.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","Statistical","value","set","reduce","res","val","Number","isNaN","Error","Array","isArray","middle","Math","floor","isEven","sort","a","b","mode","counter","max","index","push","sum","avg","average","n","map","pow","sqrt","variance"],"mappings":"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","file":"statistical.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"statistical\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"statistical\"] = factory();\n\telse\n\t\troot[\"statistical\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"statistical\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"statistical\"] = factory();\n\telse\n\t\troot[\"statistical\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Statistical = function () {\n\t    function Statistical() {\n\t        _classCallCheck(this, Statistical);\n\t    }\n\t\n\t    /**\n\t     * Take array and return sum of each elements.\n\t     *\n\t     * @param {Array} set\n\t     * @returns {*}\n\t     */\n\t\n\t\n\t    _createClass(Statistical, [{\n\t        key: 'sum',\n\t        value: function sum(set) {\n\t            return set.reduce(function (res, val) {\n\t                if (Number.isNaN(val)) throw new Error('dataSet must contain only numbers');\n\t                return res + val;\n\t            }, 0);\n\t        }\n\t\n\t        /**\n\t         * Compute median for dataSet, the central value.\n\t         *\n\t         * @param {Array} set\n\t         * @returns {number}\n\t         */\n\t\n\t    }, {\n\t        key: 'median',\n\t        value: function median(set) {\n\t            if (!set) throw new Error('Missing parameter set (median)');\n\t            if (!Array.isArray(set)) throw new Error('dataSet must be an array (median)');\n\t\n\t            var middle = Math.floor(set.length / 2);\n\t            var isEven = set.length % 2 === 0;\n\t\n\t            set.sort(function (a, b) {\n\t                return a - b;\n\t            });\n\t\n\t            return isEven ? (set[middle - 1] + set[middle]) / 2 : set[middle];\n\t        }\n\t\n\t        /**\n\t         * Get the value wit the miximum occurence.\n\t         *\n\t         * @param {Array} set\n\t         * @returns {*}\n\t         */\n\t\n\t    }, {\n\t        key: 'mode',\n\t        value: function mode(set) {\n\t            var counter = {};\n\t            var mode = [];\n\t            var max = 0;\n\t\n\t            for (var index in set) {\n\t                if (!(set[index] in counter)) counter[set[index]] = 0;\n\t\n\t                counter[set[index]]++;\n\t\n\t                if (counter[set[index]] === max) mode.push(set[index]);\n\t                if (counter[set[index]] > max) {\n\t                    max = counter[set[index]];\n\t                    mode = [set[index]];\n\t                }\n\t            }\n\t\n\t            return mode;\n\t        }\n\t\n\t        /**\n\t         * Compute average for dataSet.\n\t         *\n\t         * @param {Array} set\n\t         * @returns {*}\n\t         */\n\t\n\t    }, {\n\t        key: 'average',\n\t        value: function average(set) {\n\t            if (!set) throw new Error('Missing parameter set (average)');\n\t            if (!Array.isArray(set)) throw new Error('dataSet must be an array (average)');\n\t\n\t            return this.sum(set) / set.length;\n\t        }\n\t\n\t        /**\n\t         * Compute variance for dataSet.\n\t         *\n\t         * @param {Array} set\n\t         * @returns {*}\n\t         */\n\t\n\t    }, {\n\t        key: 'variance',\n\t        value: function variance(set) {\n\t            if (!set) throw new Error('Missing parameter set (variance)');\n\t            if (!Array.isArray(set)) throw new Error('dataSet must be an array (variance)');\n\t\n\t            var avg = this.average(set);\n\t            var n = set.length;\n\t\n\t            return this.sum(set.map(function (value) {\n\t                return Math.pow(value - avg, 2);\n\t            })) / n;\n\t        }\n\t\n\t        /**\n\t         * Compute standard deviation for dataSet.\n\t         *\n\t         * @param {Array} set\n\t         * @returns {*}\n\t         */\n\t\n\t    }, {\n\t        key: 'stdDeviation',\n\t        value: function stdDeviation(set) {\n\t            if (!set) throw new Error('Missing parameter sets (stdDeviation)');\n\t            if (!Array.isArray(set)) throw new Error('dataSet must be an array (stdDeviation)');\n\t\n\t            return Math.sqrt(this.variance(set));\n\t        }\n\t    }]);\n\t\n\t    return Statistical;\n\t}();\n\t\n\tmodule.exports = new Statistical();\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** statistical.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 3566167229b454cfa20b\n **/","'use strict';\n\nclass Statistical {\n\n    constructor() {}\n\n    /**\n     * Take array and return sum of each elements.\n     *\n     * @param {Array} set\n     * @returns {*}\n     */\n    sum(set) {\n        return set.reduce((res, val) => {\n            if (Number.isNaN(val)) throw new Error('dataSet must contain only numbers');\n            return res + val;\n        }, 0);\n    }\n\n    /**\n     * Compute median for dataSet, the central value.\n     *\n     * @param {Array} set\n     * @returns {number}\n     */\n    median(set) {\n        if (!set) throw new Error('Missing parameter set (median)');\n        if (!Array.isArray(set)) throw new Error('dataSet must be an array (median)');\n\n        const middle = Math.floor(set.length / 2);\n        const isEven = set.length % 2 === 0;\n\n        set.sort((a, b) => a - b);\n\n        return isEven ? (set[middle - 1] + set[middle]) / 2 : set[middle];\n    }\n\n    /**\n     * Get the value wit the miximum occurence.\n     *\n     * @param {Array} set\n     * @returns {*}\n     */\n    mode(set) {\n        const counter = {};\n        let mode = [];\n        let max = 0;\n\n        for (const index in set) {\n            if (!(set[index] in counter)) counter[set[index]] = 0;\n\n            counter[set[index]]++;\n\n            if (counter[set[index]] === max) mode.push(set[index]);\n            if (counter[set[index]] > max) {\n                max = counter[set[index]];\n                mode = [set[index]];\n            }\n        }\n\n        return mode;\n    }\n\n    /**\n     * Compute average for dataSet.\n     *\n     * @param {Array} set\n     * @returns {*}\n     */\n    average(set) {\n        if (!set) throw new Error('Missing parameter set (average)');\n        if (!Array.isArray(set)) throw new Error('dataSet must be an array (average)');\n\n        return this.sum(set) / set.length;\n    }\n\n    /**\n     * Compute variance for dataSet.\n     *\n     * @param {Array} set\n     * @returns {*}\n     */\n    variance(set) {\n        if (!set) throw new Error('Missing parameter set (variance)');\n        if (!Array.isArray(set)) throw new Error('dataSet must be an array (variance)');\n\n        const avg = this.average(set);\n        const n = set.length;\n\n        return this.sum(set.map(value => Math.pow(value - avg, 2))) / n;\n    }\n\n    /**\n     * Compute standard deviation for dataSet.\n     *\n     * @param {Array} set\n     * @returns {*}\n     */\n    stdDeviation(set) {\n        if (!set) throw new Error('Missing parameter sets (stdDeviation)');\n        if (!Array.isArray(set)) throw new Error('dataSet must be an array (stdDeviation)');\n\n        return Math.sqrt(this.variance(set));\n    }\n}\n\nmodule.exports = new Statistical();\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/statistical.js\n **/"],"sourceRoot":""}