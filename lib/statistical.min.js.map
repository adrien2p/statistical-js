{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///statistical.min.js","webpack:///webpack/bootstrap 02527da4c2937c1e7059","webpack:///./src/statistical.js","webpack:///./src/utils/interceptor.js","webpack:///./src/utils/cacheManager.js","webpack:///./src/statistical.base.js","webpack:///./src/statistical.distribution.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","interceptor","cacheManager","StatisticalBase","StatisticalDistribution","Statistical","_settings","cache","enabled","rootElementCount","subElementCount","_base","cacheBefore","_distribution","get","set","options","Error","Number","isNaN","settings","Interceptor","value","object","Proxy","propKey","res","apply","arguments","find","undefined","result","update","dataSet","Reflect","CacheManager","_cache","method","keys","splice","push","date","Date","getTime","some","v","_epsilon","Array","isArray","sort","a","b","reduce","val","middle","Math","floor","isEven","mode","counter","max","map","index","sum","avg","mean","n","pow","sqrt","variance","ceil","from","k","min","median","stdDeviation","quantile","factorialResult","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_StatisticalBase","getPrototypeOf","trials","probability","x","cells","cumulativeProbability","factorial"],"mappings":"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","file":"statistical.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"statistical\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"statistical\"] = factory();\n\telse\n\t\troot[\"statistical\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"statistical\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"statistical\"] = factory();\n\telse\n\t\troot[\"statistical\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar interceptor = __webpack_require__(1);\n\tvar cacheManager = __webpack_require__(2);\n\tvar StatisticalBase = __webpack_require__(3);\n\tvar StatisticalDistribution = __webpack_require__(4);\n\t\n\tvar Statistical = function () {\n\t    function Statistical() {\n\t        _classCallCheck(this, Statistical);\n\t\n\t        this._settings = {\n\t            cache: {\n\t                enabled: true,\n\t                rootElementCount: 10,\n\t                subElementCount: 30\n\t            }\n\t        };\n\t        this._base = interceptor.cacheBefore(new StatisticalBase(), cacheManager, []);\n\t        this._distribution = interceptor.cacheBefore(new StatisticalDistribution(), cacheManager, []);\n\t    }\n\t\n\t    /**\n\t     * Return _base object to provide basic statistics methods\n\t     *\n\t     * @returns {*}\n\t     */\n\t\n\t\n\t    _createClass(Statistical, [{\n\t        key: 'base',\n\t        get: function get() {\n\t            return this._base;\n\t        }\n\t\n\t        /**\n\t         * Return _distribution object to provide distribution statistics methods\n\t         *\n\t         * @returns {*}\n\t         */\n\t\n\t    }, {\n\t        key: 'distribution',\n\t        get: function get() {\n\t            return this._distribution;\n\t        }\n\t\n\t        /**\n\t         * Return settings used in statistical class.\n\t         *\n\t         * @returns {*}\n\t         */\n\t\n\t    }, {\n\t        key: 'settings',\n\t        get: function get() {\n\t            return this._settings;\n\t        }\n\t\n\t        /**\n\t         * Allow to updates statistical settings.\n\t         *\n\t         * @param {*|object} options\n\t         */\n\t        ,\n\t        set: function set(options) {\n\t            if (!options && !options.cache) throw new Error('Missing parameter options (Statistical:settings');\n\t            if (Number.isNaN(options.cache.rootElementCount)) throw new Error('rootElementCount must be a number (Statistical:settings');\n\t            if (Number.isNaN(options.cache.subElementCount)) throw new Error('subElementCount must be a number (Statistical:settings');\n\t\n\t            this._settings = {\n\t                cache: {\n\t                    enabled: options.cache.enabled,\n\t                    rootElementCount: options.cache.rootElementCount || 10,\n\t                    subElementCount: options.cache.subElementCount || 30\n\t                }\n\t            };\n\t            cacheManager.settings = this._settings.cache;\n\t        }\n\t    }]);\n\t\n\t    return Statistical;\n\t}();\n\t\n\tmodule.exports = new Statistical();\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Interceptor = function () {\n\t    function Interceptor() {\n\t        _classCallCheck(this, Interceptor);\n\t    }\n\t\n\t    /**\n\t     * Create a proxy to wrap a class method and intercept each call.\n\t     *\n\t     * @param {object} object\n\t     * @param {object} cacheManager\n\t     * @param {Array} propertyExcluded\n\t     */\n\t\n\t\n\t    _createClass(Interceptor, [{\n\t        key: 'cacheBefore',\n\t        value: function cacheBefore(object, cacheManager) {\n\t            return new Proxy(object, {\n\t                get: function get(target, propKey) {\n\t                    if (propKey in target) {\n\t                        return function () {\n\t                            var res = void 0;\n\t                            if (!cacheManager.settings.enabled) {\n\t                                var cache = cacheManager.find(propKey, arguments.length <= 0 ? undefined : arguments[0]);\n\t                                if (cache) return cache.result;\n\t\n\t                                res = target[propKey].apply(target, arguments);\n\t                                cacheManager.update(propKey, { dataSet: arguments.length <= 0 ? undefined : arguments[0], result: res });\n\t                            } else {\n\t                                res = target[propKey].apply(target, arguments);\n\t                            }\n\t\n\t                            return res;\n\t                        };\n\t                    } else {\n\t                        return Reflect.get(target, propKey);\n\t                    }\n\t                }\n\t            });\n\t        }\n\t    }]);\n\t\n\t    return Interceptor;\n\t}();\n\t\n\tmodule.exports = new Interceptor();\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar CacheManager = function () {\n\t    function CacheManager() {\n\t        _classCallCheck(this, CacheManager);\n\t\n\t        this._cache = {};\n\t        this._settings = {\n\t            enabled: true,\n\t            rootElementCount: 10,\n\t            subElementCount: 30\n\t        };\n\t    }\n\t\n\t    /**\n\t     * Return CacheManager settings\n\t     *\n\t     * @returns {{maxLength: number}|*}\n\t     */\n\t\n\t\n\t    _createClass(CacheManager, [{\n\t        key: 'update',\n\t\n\t\n\t        /**\n\t         * Update the cache saved with new results\n\t         *\n\t         * @param method\n\t         * @param {Object} options\n\t         */\n\t        value: function update(method, options) {\n\t            if (Object.keys(this._cache).length >= this._settings.rootElementCount) delete this._cache[Object.keys(this._cache)[0]];\n\t            if (this._cache[method] && this._cache[method].length >= this._settings.subElementCount) this._cache[method].splice(0, 1);\n\t\n\t            this._cache[method] = this._cache[method] || [];\n\t            this._cache[method].push({\n\t                date: new Date().getTime(),\n\t                dataSet: options.dataSet,\n\t                result: options.result\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Find an existing dataSet in the cache and return it\n\t         *\n\t         * @param {String} method\n\t         * @param {Array} dataSet\n\t         * @returns {Object}\n\t         * @private\n\t         */\n\t\n\t    }, {\n\t        key: 'find',\n\t        value: function find(method, dataSet) {\n\t            var cache = this._cache[method] || [];\n\t\n\t            var res = null;\n\t            cache.some(function (v) {\n\t                if (v.dataSet === dataSet) {\n\t                    res = v;\n\t                    return true;\n\t                }\n\t\n\t                return false;\n\t            });\n\t\n\t            return res;\n\t        }\n\t    }, {\n\t        key: 'settings',\n\t        get: function get() {\n\t            return this._settings;\n\t        }\n\t\n\t        /**\n\t         * Return the entire cache\n\t         *\n\t         * @returns {{}|*}\n\t         */\n\t        ,\n\t\n\t\n\t        /**\n\t         * Update existing settings to manage cache\n\t         *\n\t         * @param {*} options\n\t         */\n\t        set: function set(options) {\n\t            if (!options) throw new Error('Missing parameter options (CacheManager:settings');\n\t            this._settings = {\n\t                enabled: options.enabled,\n\t                rootElementCount: options.rootElementCount || 10,\n\t                subElementCount: options.subElementCount || 30\n\t            };\n\t        }\n\t    }, {\n\t        key: 'cache',\n\t        get: function get() {\n\t            return this._cache;\n\t        }\n\t    }]);\n\t\n\t    return CacheManager;\n\t}();\n\t\n\tmodule.exports = new CacheManager();\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar StatisticalBase = function () {\n\t    function StatisticalBase() {\n\t        _classCallCheck(this, StatisticalBase);\n\t\n\t        /**\n\t         * We use `ε`, epsilon, as a stopping criterion when we want to iterate\n\t         * until we're \"close enough\". Epsilon is a very small number: for\n\t         * simple statistics, that number is **0.0001**\n\t         *\n\t         * This is used in calculations like the binomialDistribution, in which\n\t         * the process of finding a value is [iterative](https://en.wikipedia.org/wiki/Iterative_method):\n\t         * it progresses until it is close enough.\n\t         *\n\t         * @type {number}\n\t         */\n\t        this._epsilon = 0.0001;\n\t    }\n\t\n\t    /**\n\t     * Return the smallest value of the dataSet.\n\t     *\n\t     * @param {Array} dataSet\n\t     * @returns {number}\n\t     */\n\t\n\t\n\t    _createClass(StatisticalBase, [{\n\t        key: 'min',\n\t        value: function min(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical.base:min).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical.base:min).');\n\t\n\t            return dataSet.sort(function (a, b) {\n\t                return a - b;\n\t            })[0];\n\t        }\n\t\n\t        /**\n\t         * Return the biggest value of the dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {number}\n\t         */\n\t\n\t    }, {\n\t        key: 'max',\n\t        value: function max(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical.base:max).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical.base:max).');\n\t\n\t            return dataSet.sort(function (a, b) {\n\t                return a + b;\n\t            })[0];\n\t        }\n\t\n\t        /**\n\t         * Take array and return sum of each elements.\n\t         *\n\t         * @param dataSet\n\t         * @returns {*}\n\t         */\n\t\n\t    }, {\n\t        key: 'sum',\n\t        value: function sum(dataSet) {\n\t            return dataSet.reduce(function (res, val) {\n\t                if (Number.isNaN(val)) throw new Error('dataSet must contain only numbers (Statistical.base:sum).');\n\t                return res + val;\n\t            }, 0);\n\t        }\n\t\n\t        /**\n\t         * Compute median for dataSet, the central value.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {number}\n\t         */\n\t\n\t    }, {\n\t        key: 'median',\n\t        value: function median(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical.base:median).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical.base:median).');\n\t\n\t            var middle = Math.floor(dataSet.length / 2);\n\t            var isEven = dataSet.length % 2 === 0;\n\t\n\t            dataSet = dataSet.sort(function (a, b) {\n\t                return a - b;\n\t            });\n\t\n\t            return isEven ? (dataSet[middle - 1] + dataSet[middle]) / 2 : dataSet[middle];\n\t        }\n\t\n\t        /**\n\t         * Get the value wit the miximum occurence.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {*}\n\t         */\n\t\n\t    }, {\n\t        key: 'mode',\n\t        value: function mode(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical.base:mode).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical.base:mode).');\n\t\n\t            var counter = {};\n\t            var mode = [];\n\t            var max = 0;\n\t\n\t            dataSet.map(function (value, index) {\n\t                if (!(dataSet[index] in counter)) counter[dataSet[index]] = 0;\n\t\n\t                counter[dataSet[index]]++;\n\t\n\t                if (counter[dataSet[index]] === max) mode.push(dataSet[index]);\n\t                if (counter[dataSet[index]] > max) {\n\t                    max = counter[dataSet[index]];\n\t                    mode = [dataSet[index]];\n\t                }\n\t            });\n\t\n\t            return mode.length > 1 ? mode : mode[0];\n\t        }\n\t\n\t        /**\n\t         * Compute mean for dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {number}\n\t         */\n\t\n\t    }, {\n\t        key: 'mean',\n\t        value: function mean(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical.base:mean).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical.base:mean).');\n\t\n\t            return this.sum(dataSet) / dataSet.length;\n\t        }\n\t\n\t        /**\n\t         * Compute variance for dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {number}\n\t         */\n\t\n\t    }, {\n\t        key: 'variance',\n\t        value: function variance(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical.base:variance).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical.base:variance).');\n\t\n\t            var avg = this.mean(dataSet);\n\t            var n = dataSet.length;\n\t\n\t            return this.sum(dataSet.map(function (value) {\n\t                return Math.pow(value - avg, 2);\n\t            })) / n;\n\t        }\n\t\n\t        /**\n\t         * Compute standard deviation for dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {number}\n\t         */\n\t\n\t    }, {\n\t        key: 'stdDeviation',\n\t        value: function stdDeviation(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical.base:stdDeviation).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical.base:stdDeviation).');\n\t\n\t            return Math.sqrt(this.variance(dataSet));\n\t        }\n\t\n\t        /**\n\t         * Provided the quantile asked by the index given, if no index given, return all quantile of the dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @param {number} index\n\t         * @returns {Array}\n\t         */\n\t\n\t    }, {\n\t        key: 'quantile',\n\t        value: function quantile(dataSet) {\n\t            var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\t\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical.base:quantile).');\n\t            if (index && (Number.isNaN(index) || index < 0 || index > 4)) throw new Error('index must be a number and between 1 - 4 (Statistical.base:quantile).');\n\t\n\t            dataSet = dataSet.sort(function (a, b) {\n\t                return a - b;\n\t            });\n\t            return !index ? [1, 2, 3, 4].map(function (i) {\n\t                return dataSet[Math.ceil(dataSet.length * (i / 4)) - 1];\n\t            }) : dataSet[Math.ceil(dataSet.length * (index / 4) - 1)];\n\t        }\n\t\n\t        /**\n\t         * Provided the percentile asked by the index given, if no index given, return all percentile of the dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @param {number} index\n\t         * @returns {Array}\n\t         */\n\t\n\t    }, {\n\t        key: 'percentile',\n\t        value: function percentile(dataSet) {\n\t            var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\t\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical.base:percentile).');\n\t            if (index && (Number.isNaN(index) || index < 0 || index > 100)) throw new Error('index must be a number and between 1 - 100 (Statistical.base:percentile)');\n\t\n\t            dataSet = dataSet.sort(function (a, b) {\n\t                return a - b;\n\t            });\n\t            return !index ? Array.from({ length: 99 }, function (v, k) {\n\t                return k + 1;\n\t            }).map(function (i) {\n\t                return dataSet[i];\n\t            }) : dataSet[Math.ceil(index / 100 * dataSet.length)];\n\t        }\n\t\n\t        /**\n\t         * Return the entire result of descriptives statistics above\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {{min: number, max: number, sum: *, median: number, mode: *, mean: number, variance: number, stdDeviation: number, quantile: Array}}\n\t         */\n\t\n\t    }, {\n\t        key: 'summary',\n\t        value: function summary(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical.base:summary).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical.base:summary).');\n\t\n\t            return {\n\t                min: this.min(dataSet),\n\t                max: this.max(dataSet),\n\t                sum: this.sum(dataSet),\n\t                median: this.median(dataSet),\n\t                mode: this.mode(dataSet),\n\t                mean: this.mean(dataSet),\n\t                variance: this.variance(dataSet),\n\t                stdDeviation: this.stdDeviation(dataSet),\n\t                quantile: this.quantile(dataSet)\n\t            };\n\t        }\n\t\n\t        /**\n\t         * Return factorial of n (each number multiply the previous)\n\t         *\n\t         * @param {number} n\n\t         * @returns {number}\n\t         */\n\t\n\t    }, {\n\t        key: 'factorial',\n\t        value: function factorial(n) {\n\t            if (Number.isNaN(n)) throw new Error('Missing parameter n and must be a number (Statistical.base:factorial).');\n\t            if (n < 0) throw new Error('n must be positive');\n\t\n\t            var factorialResult = 1;\n\t            for (var i = 2; i <= n; i++) {\n\t                factorialResult *= i;\n\t            }\n\t\n\t            return factorialResult;\n\t        }\n\t    }]);\n\t\n\t    return StatisticalBase;\n\t}();\n\t\n\tmodule.exports = StatisticalBase;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar StatisticalBase = __webpack_require__(3);\n\t\n\tvar StatisticalDistribution = function (_StatisticalBase) {\n\t    _inherits(StatisticalDistribution, _StatisticalBase);\n\t\n\t    function StatisticalDistribution() {\n\t        _classCallCheck(this, StatisticalDistribution);\n\t\n\t        return _possibleConstructorReturn(this, (StatisticalDistribution.__proto__ || Object.getPrototypeOf(StatisticalDistribution)).call(this));\n\t    }\n\t\n\t    /**\n\t     * The [Binomial Distribution](http://en.wikipedia.org/wiki/Binomial_distribution)\n\t     *\n\t     * @param {number} trials number of trials to simulate\n\t     * @param {number} probability\n\t     * @returns {Object} output\n\t     */\n\t\n\t\n\t    _createClass(StatisticalDistribution, [{\n\t        key: 'binomial',\n\t        value: function binomial(trials, probability) {\n\t            if (!trials) throw new Error('Missing parameter trials (Statistical.distribution:binomial).');\n\t            if (!probability) throw new Error('Missing parameter probability (Statistical.distribution:binomial).');\n\t            if (probability < 0 || probability > 1 || trials <= 1) {\n\t                throw new Error('probability must fall between 0 - 1 and trials gretter than 1');\n\t            }\n\t\n\t            var x = 0;\n\t            var cells = {};\n\t            var cumulativeProbability = 0;\n\t\n\t            do {\n\t                cells[x] = this.factorial(trials) / (this.factorial(x) * this.factorial(trials - x)) * (Math.pow(probability, x) * Math.pow(1 - probability, trials - x));\n\t                cumulativeProbability += cells[x];\n\t                x++;\n\t            } while (cumulativeProbability < 1 - this._epsilon);\n\t\n\t            return cells;\n\t        }\n\t    }]);\n\t\n\t    return StatisticalDistribution;\n\t}(StatisticalBase);\n\t\n\tmodule.exports = StatisticalDistribution;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** statistical.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 02527da4c2937c1e7059\n **/","'use strict';\n\nconst interceptor = require('./utils/interceptor');\nconst cacheManager = require('./utils/cacheManager');\nconst StatisticalBase = require('./statistical.base');\nconst StatisticalDistribution = require('./statistical.distribution');\n\nclass Statistical {\n    constructor() {\n        this._settings = {\n            cache: {\n                enabled: true,\n                rootElementCount: 10,\n                subElementCount: 30\n            }\n        };\n        this._base = interceptor.cacheBefore(new StatisticalBase(), cacheManager, []);\n        this._distribution = interceptor.cacheBefore(new StatisticalDistribution(), cacheManager, []);\n    }\n\n    /**\n     * Return _base object to provide basic statistics methods\n     *\n     * @returns {*}\n     */\n    get base() {\n        return this._base;\n    }\n\n    /**\n     * Return _distribution object to provide distribution statistics methods\n     *\n     * @returns {*}\n     */\n    get distribution() {\n        return this._distribution;\n    }\n\n    /**\n     * Return settings used in statistical class.\n     *\n     * @returns {*}\n     */\n    get settings() {\n        return this._settings;\n    }\n\n    /**\n     * Allow to updates statistical settings.\n     *\n     * @param {*|object} options\n     */\n    set settings(options) {\n        if (!options && !options.cache) throw new Error('Missing parameter options (Statistical:settings');\n        if (Number.isNaN(options.cache.rootElementCount)) throw new Error('rootElementCount must be a number (Statistical:settings');\n        if (Number.isNaN(options.cache.subElementCount)) throw new Error('subElementCount must be a number (Statistical:settings');\n\n        this._settings = {\n            cache: {\n                enabled: options.cache.enabled,\n                rootElementCount: options.cache.rootElementCount || 10,\n                subElementCount: options.cache.subElementCount || 30\n            }\n        };\n        cacheManager.settings = this._settings.cache;\n    }\n}\n\n\nmodule.exports = new Statistical();\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/statistical.js\n **/","'use strict';\n\nclass Interceptor {\n    constructor() {}\n\n    /**\n     * Create a proxy to wrap a class method and intercept each call.\n     *\n     * @param {object} object\n     * @param {object} cacheManager\n     * @param {Array} propertyExcluded\n     */\n    cacheBefore(object, cacheManager) {\n        return new Proxy(object, {\n            get: (target, propKey) => {\n                if (propKey in target) {\n                    return (...args) => {\n                        let res;\n                        if (!cacheManager.settings.enabled) {\n                            const cache = cacheManager.find(propKey, args[0]);\n                            if (cache) return cache.result;\n\n                            res = target[propKey](...args);\n                            cacheManager.update(propKey, {dataSet: args[0], result: res});\n                        } else {\n                            res = target[propKey](...args);\n                        }\n\n                        return res;\n                    };\n                } else {\n                    return Reflect.get(target, propKey);\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Interceptor();\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/utils/interceptor.js\n **/","'use strict';\n\nclass CacheManager {\n    constructor() {\n        this._cache = {};\n        this._settings = {\n            enabled: true,\n            rootElementCount: 10,\n            subElementCount: 30\n        };\n    }\n\n    /**\n     * Return CacheManager settings\n     *\n     * @returns {{maxLength: number}|*}\n     */\n    get settings() {\n        return this._settings;\n    }\n\n    /**\n     * Return the entire cache\n     *\n     * @returns {{}|*}\n     */\n    get cache() {\n        return this._cache;\n    }\n\n    /**\n     * Update existing settings to manage cache\n     *\n     * @param {*} options\n     */\n    set settings(options) {\n        if (!options) throw new Error('Missing parameter options (CacheManager:settings');\n        this._settings = {\n            enabled: options.enabled,\n            rootElementCount: options.rootElementCount || 10,\n            subElementCount: options.subElementCount || 30\n        };\n    }\n\n    /**\n     * Update the cache saved with new results\n     *\n     * @param method\n     * @param {Object} options\n     */\n    update(method, options) {\n        if (Object.keys(this._cache).length >= this._settings.rootElementCount) delete this._cache[Object.keys(this._cache)[0]];\n        if (this._cache[method] && this._cache[method].length >= this._settings.subElementCount) this._cache[method].splice(0, 1);\n\n        this._cache[method] = this._cache[method] || [];\n        this._cache[method].push({\n            date: new Date().getTime(),\n            dataSet: options.dataSet,\n            result: options.result\n        });\n    }\n\n    /**\n     * Find an existing dataSet in the cache and return it\n     *\n     * @param {String} method\n     * @param {Array} dataSet\n     * @returns {Object}\n     * @private\n     */\n    find(method, dataSet) {\n        const cache = this._cache[method] || [];\n\n        let res = null;\n        cache.some(v => {\n            if (v.dataSet === dataSet) {\n                res = v;\n                return true;\n            }\n\n            return false;\n        });\n\n        return res;\n    }\n}\n\nmodule.exports = new CacheManager();\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/utils/cacheManager.js\n **/","'use strict';\n\nclass StatisticalBase {\n    constructor() {\n        /**\n         * We use `ε`, epsilon, as a stopping criterion when we want to iterate\n         * until we're \"close enough\". Epsilon is a very small number: for\n         * simple statistics, that number is **0.0001**\n         *\n         * This is used in calculations like the binomialDistribution, in which\n         * the process of finding a value is [iterative](https://en.wikipedia.org/wiki/Iterative_method):\n         * it progresses until it is close enough.\n         *\n         * @type {number}\n         */\n        this._epsilon = 0.0001;\n    }\n\n    /**\n     * Return the smallest value of the dataSet.\n     *\n     * @param {Array} dataSet\n     * @returns {number}\n     */\n    min(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical.base:min).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical.base:min).');\n\n        return dataSet.sort((a, b) => a - b)[0];\n    }\n\n    /**\n     * Return the biggest value of the dataSet.\n     *\n     * @param {Array} dataSet\n     * @returns {number}\n     */\n    max(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical.base:max).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical.base:max).');\n\n        return dataSet.sort((a, b) => a + b)[0];\n    }\n\n\n    /**\n     * Take array and return sum of each elements.\n     *\n     * @param dataSet\n     * @returns {*}\n     */\n    sum(dataSet) {\n        return dataSet.reduce((res, val) => {\n            if (Number.isNaN(val)) throw new Error('dataSet must contain only numbers (Statistical.base:sum).');\n            return res + val;\n        }, 0);\n    }\n\n    /**\n     * Compute median for dataSet, the central value.\n     *\n     * @param {Array} dataSet\n     * @returns {number}\n     */\n    median(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical.base:median).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical.base:median).');\n\n        const middle = Math.floor(dataSet.length / 2);\n        const isEven = dataSet.length % 2 === 0;\n\n        dataSet = dataSet.sort((a, b) => a - b);\n\n        return isEven ? (dataSet[middle - 1] + dataSet[middle]) / 2 : dataSet[middle];\n    }\n\n    /**\n     * Get the value wit the miximum occurence.\n     *\n     * @param {Array} dataSet\n     * @returns {*}\n     */\n    mode(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical.base:mode).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical.base:mode).');\n\n        const counter = {};\n        let mode = [];\n        let max = 0;\n\n        dataSet.map((value, index) => {\n            if (!(dataSet[index] in counter)) counter[dataSet[index]] = 0;\n\n            counter[dataSet[index]]++;\n\n            if (counter[dataSet[index]] === max) mode.push(dataSet[index]);\n            if (counter[dataSet[index]] > max) {\n                max = counter[dataSet[index]];\n                mode = [dataSet[index]];\n            }\n        });\n\n        return mode.length > 1 ? mode : mode[0];\n    }\n\n    /**\n     * Compute mean for dataSet.\n     *\n     * @param {Array} dataSet\n     * @returns {number}\n     */\n    mean(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical.base:mean).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical.base:mean).');\n\n        return this.sum(dataSet) / dataSet.length;\n    }\n\n    /**\n     * Compute variance for dataSet.\n     *\n     * @param {Array} dataSet\n     * @returns {number}\n     */\n    variance(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical.base:variance).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical.base:variance).');\n\n        const avg = this.mean(dataSet);\n        const n = dataSet.length;\n\n        return this.sum(dataSet.map(value => Math.pow(value - avg, 2))) / n;\n    }\n\n    /**\n     * Compute standard deviation for dataSet.\n     *\n     * @param {Array} dataSet\n     * @returns {number}\n     */\n    stdDeviation(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical.base:stdDeviation).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical.base:stdDeviation).');\n\n        return Math.sqrt(this.variance(dataSet));\n    }\n\n    /**\n     * Provided the quantile asked by the index given, if no index given, return all quantile of the dataSet.\n     *\n     * @param {Array} dataSet\n     * @param {number} index\n     * @returns {Array}\n     */\n    quantile(dataSet, index = null) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical.base:quantile).');\n        if (index && (Number.isNaN(index) || index < 0 || index > 4)) throw new Error('index must be a number and between 1 - 4 (Statistical.base:quantile).');\n\n        dataSet = dataSet.sort((a, b) => a - b);\n        return !index ?\n            [1, 2, 3, 4].map(i => dataSet[Math.ceil((dataSet.length * (i / 4))) - 1]) :\n            dataSet[Math.ceil((dataSet.length * (index / 4)) - 1)];\n    }\n\n    /**\n     * Provided the percentile asked by the index given, if no index given, return all percentile of the dataSet.\n     *\n     * @param {Array} dataSet\n     * @param {number} index\n     * @returns {Array}\n     */\n    percentile(dataSet, index = null) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical.base:percentile).');\n        if (index && (Number.isNaN(index) || index < 0 || index > 100)) throw new Error('index must be a number and between 1 - 100 (Statistical.base:percentile)');\n\n        dataSet = dataSet.sort((a, b) => a - b);\n        return !index ? Array.from({length: 99}, (v, k) => k + 1).map(i => dataSet[i]) : dataSet[Math.ceil((index / 100) * dataSet.length)];\n    }\n\n    /**\n     * Return the entire result of descriptives statistics above\n     *\n     * @param {Array} dataSet\n     * @returns {{min: number, max: number, sum: *, median: number, mode: *, mean: number, variance: number, stdDeviation: number, quantile: Array}}\n     */\n    summary(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical.base:summary).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical.base:summary).');\n\n        return {\n            min: this.min(dataSet),\n            max: this.max(dataSet),\n            sum: this.sum(dataSet),\n            median: this.median(dataSet),\n            mode: this.mode(dataSet),\n            mean: this.mean(dataSet),\n            variance: this.variance(dataSet),\n            stdDeviation: this.stdDeviation(dataSet),\n            quantile: this.quantile(dataSet)\n        };\n    }\n\n    /**\n     * Return factorial of n (each number multiply the previous)\n     *\n     * @param {number} n\n     * @returns {number}\n     */\n    factorial(n) {\n        if (Number.isNaN(n)) throw new Error('Missing parameter n and must be a number (Statistical.base:factorial).');\n        if (n < 0) throw new Error('n must be positive');\n\n        let factorialResult = 1;\n        for (let i = 2; i <= n; i++) {\n            factorialResult *= i;\n        }\n\n        return factorialResult;\n    }\n}\n\n\nmodule.exports = StatisticalBase;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/statistical.base.js\n **/","'use strict';\n\nconst StatisticalBase = require('./statistical.base');\n\nclass StatisticalDistribution extends StatisticalBase {\n    constructor() {\n        super();\n    }\n\n    /**\n     * The [Binomial Distribution](http://en.wikipedia.org/wiki/Binomial_distribution)\n     *\n     * @param {number} trials number of trials to simulate\n     * @param {number} probability\n     * @returns {Object} output\n     */\n    binomial(trials, probability) {\n        if (!trials) throw new Error('Missing parameter trials (Statistical.distribution:binomial).');\n        if (!probability) throw new Error('Missing parameter probability (Statistical.distribution:binomial).');\n        if (probability < 0 || probability > 1 || trials <= 1) {\n            throw new Error('probability must fall between 0 - 1 and trials gretter than 1');\n        }\n\n        let x = 0;\n        let cells = {};\n        let cumulativeProbability = 0;\n\n        do {\n            cells[x] = this.factorial(trials) / (this.factorial(x) * this.factorial(trials - x)) * (Math.pow(probability, x) * Math.pow(1 - probability, trials - x));\n            cumulativeProbability += cells[x];\n            x++;\n        } while (cumulativeProbability < 1 - this._epsilon);\n\n        return cells;\n    }\n\n\n}\n\n\nmodule.exports = StatisticalDistribution;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/statistical.distribution.js\n **/"],"sourceRoot":""}