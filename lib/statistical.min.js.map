{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///statistical.min.js","webpack:///webpack/bootstrap 16fd4c42b5ca06de0483","webpack:///./src/statistical.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","Statistical","value","methodName","param","Error","t","Date","getTime","begining","end","dataSet","reduce","res","val","Number","isNaN","Array","isArray","middle","Math","floor","isEven","sort","a","b","mode","counter","max","map","index","push","sum","avg","average","n","pow","sqrt","variance","arguments","undefined","ceil","from","v","k"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,OAAA,iBAAAH,GACA,gBAAAC,SACAA,QAAA,YAAAD,IAEAD,EAAA,YAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAP,WACAS,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,QAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASL,EAAQD,GEtDvB,YF4DC,SAASe,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,MExD3hBkB,EF4Da,WE1Df,QAAAA,KAAcpB,EAAAX,KAAA+B,GFqQb,MA7LAhB,GAAagB,IACTJ,IAAK,cACLK,MAAO,SEjEAC,EAAYC,GACpB,IAAKD,EAAY,KAAM,IAAIE,OAAM,8CACjC,KAAKnC,KAAKiC,GAAa,KAAM,IAAIE,OAAJ,UAAoBF,EAApB,+CAE7B,IAAMG,GAAI,kBAAM,GAAIC,OAAOC,WAErBC,EAAWH,GACjBpC,MAAKiC,GAAYC,EACjB,IAAMM,GAAMJ,GAEZ,OAAQI,GAAMD,EAAY,QF8EzBZ,IAAK,MACLK,MAAO,SEtERS,GACA,MAAOA,GAAQC,OAAO,SAACC,EAAKC,GACxB,GAAIC,OAAOC,MAAMF,GAAM,KAAM,IAAIT,OAAM,qCACvC,OAAOQ,GAAMC,GACd,MFiFFjB,IAAK,SACLK,MAAO,SEzELS,GACH,IAAKA,EAAS,KAAM,IAAIN,OAAM,sCAC9B,KAAKY,MAAMC,QAAQP,GAAU,KAAM,IAAIN,OAAM,qCAE7C,IAAMc,GAASC,KAAKC,MAAMV,EAAQrB,OAAS,GACrCgC,EAASX,EAAQrB,OAAS,IAAM,CAItC,OAFAqB,GAAUA,EAAQY,KAAK,SAACC,EAAGC,GAAJ,MAAUD,GAAIC,IAE9BH,GAAUX,EAAQQ,EAAS,GAAKR,EAAQQ,IAAW,EAAIR,EAAQQ,MFsFrEtB,IAAK,OACLK,MAAO,QAASwB,GE9EhBf,GACD,GAAMgB,MACFD,KACAE,EAAM,CAcV,OAZAjB,GAAQkB,IAAI,SAAC3B,EAAO4B,GACVnB,EAAQmB,IAAUH,KAAUA,EAAQhB,EAAQmB,IAAU,GAE5DH,EAAQhB,EAAQmB,MAEZH,EAAQhB,EAAQmB,MAAYF,GAAKF,EAAKK,KAAKpB,EAAQmB,IACnDH,EAAQhB,EAAQmB,IAAUF,IAC1BA,EAAMD,EAAQhB,EAAQmB,IACtBJ,GAAQf,EAAQmB,OAIjBJ,KFyFN7B,IAAK,UACLK,MAAO,SEjFJS,GACJ,IAAKA,EAAS,KAAM,IAAIN,OAAM,uCAC9B,KAAKY,MAAMC,QAAQP,GAAU,KAAM,IAAIN,OAAM,sCAE7C,OAAOnC,MAAK8D,IAAIrB,GAAWA,EAAQrB,UF4FlCO,IAAK,WACLK,MAAO,SEpFHS,GACL,IAAKA,EAAS,KAAM,IAAIN,OAAM,wCAC9B,KAAKY,MAAMC,QAAQP,GAAU,KAAM,IAAIN,OAAM,uCAE7C,IAAM4B,GAAM/D,KAAKgE,QAAQvB,GACnBwB,EAAIxB,EAAQrB,MAElB,OAAOpB,MAAK8D,IAAIrB,EAAQkB,IAAI,SAAA3B,GAAA,MAASkB,MAAKgB,IAAIlC,EAAQ+B,EAAK,MAAOE,KFiGjEtC,IAAK,eACLK,MAAO,SEzFCS,GACT,IAAKA,EAAS,KAAM,IAAIN,OAAM,4CAC9B,KAAKY,MAAMC,QAAQP,GAAU,KAAM,IAAIN,OAAM,2CAE7C,OAAOe,MAAKiB,KAAKnE,KAAKoE,SAAS3B,OFqG9Bd,IAAK,WACLK,MAAO,SE5FHS,GAAuB,GAAdmB,GAAcS,UAAAjD,OAAA,GAAAkD,SAAAD,UAAA,GAAAA,UAAA,GAAN,IACtB,KAAK5B,EAAS,KAAM,IAAIN,OAAM,4CAC9B,IAAIyB,IAAUf,OAAOC,MAAMc,IAAUA,EAAQ,GAAKA,EAAQ,GAAI,KAAM,IAAIzB,OAAM,2CAG9E,OADAM,GAAUA,EAAQY,KAAK,SAACC,EAAGC,GAAJ,MAAUD,GAAIC,IAC7BK,EAEJnB,EAAQS,KAAKqB,KAAM9B,EAAQrB,QAAUwC,EAAQ,GAAM,KADlD,EAAG,EAAG,EAAG,GAAGD,IAAI,SAAAxC,GAAA,MAAKsB,GAAQS,KAAKqB,KAAM9B,EAAQrB,QAAUD,EAAI,IAAO,QF6GzEQ,IAAK,aACLK,MAAO,SEnGDS,GAAuB,GAAdmB,GAAcS,UAAAjD,OAAA,GAAAkD,SAAAD,UAAA,GAAAA,UAAA,GAAN,IACxB,KAAK5B,EAAS,KAAM,IAAIN,OAAM,4CAC9B,IAAIyB,IAAUf,OAAOC,MAAMc,IAAUA,EAAQ,GAAKA,EAAQ,KAAM,KAAM,IAAIzB,OAAM,6CAGhF,OADAM,GAAUA,EAAQY,KAAK,SAACC,EAAGC,GAAJ,MAAUD,GAAIC,IAC7BK,EAAyEnB,EAAQS,KAAKqB,KAAMX,EAAQ,IAAOnB,EAAQrB,SAA3G2B,MAAMyB,MAAMpD,OAAQ,IAAK,SAACqD,EAAGC,GAAJ,MAAUA,GAAI,IAAGf,IAAI,SAAAxC,GAAA,MAAKsB,GAAQtB,SF+GvEY,IE3GZlC,GAAOD,QAAU,GAAImC","file":"statistical.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"statistical\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"statistical\"] = factory();\n\telse\n\t\troot[\"statistical\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"statistical\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"statistical\"] = factory();\n\telse\n\t\troot[\"statistical\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Statistical = function () {\n\t    function Statistical() {\n\t        _classCallCheck(this, Statistical);\n\t    }\n\t\n\t    /**\n\t     * Return the execution time of the method asked by methodName with the param given\n\t     *\n\t     * @param {String} methodName\n\t     * @param {Array} param\n\t     * @returns {string}\n\t     */\n\t\n\t\n\t    _createClass(Statistical, [{\n\t        key: 'performance',\n\t        value: function performance(methodName, param) {\n\t            if (!methodName) throw new Error('Missing parameter methodName (performance).');\n\t            if (!this[methodName]) throw new Error('Method ' + methodName + ' doesn\\'t exist in statistical (performance).');\n\t\n\t            var t = function t() {\n\t                return new Date().getTime();\n\t            };\n\t\n\t            var begining = t();\n\t            this[methodName](param);\n\t            var end = t();\n\t\n\t            return end - begining + 'ms';\n\t        }\n\t\n\t        /**\n\t         * Take array and return sum of each elements.\n\t         *\n\t         * @param dataSet\n\t         * @returns {*}\n\t         */\n\t\n\t    }, {\n\t        key: 'sum',\n\t        value: function sum(dataSet) {\n\t            return dataSet.reduce(function (res, val) {\n\t                if (Number.isNaN(val)) throw new Error('dataSet must contain only numbers.');\n\t                return res + val;\n\t            }, 0);\n\t        }\n\t\n\t        /**\n\t         * Compute median for dataSet, the central value.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {number}\n\t         */\n\t\n\t    }, {\n\t        key: 'median',\n\t        value: function median(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (median).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (median).');\n\t\n\t            var middle = Math.floor(dataSet.length / 2);\n\t            var isEven = dataSet.length % 2 === 0;\n\t\n\t            dataSet = dataSet.sort(function (a, b) {\n\t                return a - b;\n\t            });\n\t\n\t            return isEven ? (dataSet[middle - 1] + dataSet[middle]) / 2 : dataSet[middle];\n\t        }\n\t\n\t        /**\n\t         * Get the value wit the miximum occurence.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {*}\n\t         */\n\t\n\t    }, {\n\t        key: 'mode',\n\t        value: function mode(dataSet) {\n\t            var counter = {};\n\t            var mode = [];\n\t            var max = 0;\n\t\n\t            dataSet.map(function (value, index) {\n\t                if (!(dataSet[index] in counter)) counter[dataSet[index]] = 0;\n\t\n\t                counter[dataSet[index]]++;\n\t\n\t                if (counter[dataSet[index]] === max) mode.push(dataSet[index]);\n\t                if (counter[dataSet[index]] > max) {\n\t                    max = counter[dataSet[index]];\n\t                    mode = [dataSet[index]];\n\t                }\n\t            });\n\t\n\t            return mode;\n\t        }\n\t\n\t        /**\n\t         * Compute average for dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'average',\n\t        value: function average(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (average).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (average).');\n\t\n\t            return this.sum(dataSet) / dataSet.length;\n\t        }\n\t\n\t        /**\n\t         * Compute variance for dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'variance',\n\t        value: function variance(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (variance).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (variance).');\n\t\n\t            var avg = this.average(dataSet);\n\t            var n = dataSet.length;\n\t\n\t            return this.sum(dataSet.map(function (value) {\n\t                return Math.pow(value - avg, 2);\n\t            })) / n;\n\t        }\n\t\n\t        /**\n\t         * Compute standard deviation for dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'stdDeviation',\n\t        value: function stdDeviation(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (stdDeviation).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (stdDeviation).');\n\t\n\t            return Math.sqrt(this.variance(dataSet));\n\t        }\n\t\n\t        /**\n\t         * Provided the quantile asked by the index given, if no index given, return all quantile of the dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @param {Number} index\n\t         * @returns {Array}\n\t         */\n\t\n\t    }, {\n\t        key: 'quantile',\n\t        value: function quantile(dataSet) {\n\t            var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\t\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (stdDeviation).');\n\t            if (index && (Number.isNaN(index) || index < 0 || index > 4)) throw new Error('index must be a number and between 1 - 4');\n\t\n\t            dataSet = dataSet.sort(function (a, b) {\n\t                return a - b;\n\t            });\n\t            return !index ? [1, 2, 3, 4].map(function (i) {\n\t                return dataSet[Math.ceil(dataSet.length * (i / 4)) - 1];\n\t            }) : dataSet[Math.ceil(dataSet.length * (index / 4) - 1)];\n\t        }\n\t\n\t        /**\n\t         * Provided the percentile asked by the index given, if no index given, return all percentile of the dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @param {Number} index\n\t         * @returns {Array}\n\t         */\n\t\n\t    }, {\n\t        key: 'percentile',\n\t        value: function percentile(dataSet) {\n\t            var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\t\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (stdDeviation).');\n\t            if (index && (Number.isNaN(index) || index < 0 || index > 100)) throw new Error('index must be a number and between 1 - 100');\n\t\n\t            dataSet = dataSet.sort(function (a, b) {\n\t                return a - b;\n\t            });\n\t            return !index ? Array.from({ length: 99 }, function (v, k) {\n\t                return k + 1;\n\t            }).map(function (i) {\n\t                return dataSet[i];\n\t            }) : dataSet[Math.ceil(index / 100 * dataSet.length)];\n\t        }\n\t    }]);\n\t\n\t    return Statistical;\n\t}();\n\t\n\tmodule.exports = new Statistical();\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** statistical.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 16fd4c42b5ca06de0483\n **/","'use strict';\n\nclass Statistical {\n\n    constructor() {}\n\n    /**\n     * Return the execution time of the method asked by methodName with the param given\n     *\n     * @param {String} methodName\n     * @param {Array} param\n     * @returns {string}\n     */\n    performance(methodName, param) {\n        if (!methodName) throw new Error('Missing parameter methodName (performance).');\n        if (!this[methodName]) throw new Error(`Method ${methodName} doesn't exist in statistical (performance).`);\n\n        const t = () => new Date().getTime();\n\n        const begining = t();\n        this[methodName](param);\n        const end = t();\n\n        return (end - begining) + 'ms';\n    }\n\n    /**\n     * Take array and return sum of each elements.\n     *\n     * @param dataSet\n     * @returns {*}\n     */\n    sum(dataSet) {\n        return dataSet.reduce((res, val) => {\n            if (Number.isNaN(val)) throw new Error('dataSet must contain only numbers.');\n            return res + val;\n        }, 0);\n    }\n\n    /**\n     * Compute median for dataSet, the central value.\n     *\n     * @param {Array} dataSet\n     * @returns {number}\n     */\n    median(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (median).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (median).');\n\n        const middle = Math.floor(dataSet.length / 2);\n        const isEven = dataSet.length % 2 === 0;\n\n        dataSet = dataSet.sort((a, b) => a - b);\n\n        return isEven ? (dataSet[middle - 1] + dataSet[middle]) / 2 : dataSet[middle];\n    }\n\n    /**\n     * Get the value wit the miximum occurence.\n     *\n     * @param {Array} dataSet\n     * @returns {*}\n     */\n    mode(dataSet) {\n        const counter = {};\n        let mode = [];\n        let max = 0;\n\n        dataSet.map((value, index) => {\n            if (!(dataSet[index] in counter)) counter[dataSet[index]] = 0;\n\n            counter[dataSet[index]]++;\n\n            if (counter[dataSet[index]] === max) mode.push(dataSet[index]);\n            if (counter[dataSet[index]] > max) {\n                max = counter[dataSet[index]];\n                mode = [dataSet[index]];\n            }\n        });\n\n        return mode;\n    }\n\n    /**\n     * Compute average for dataSet.\n     *\n     * @param {Array} dataSet\n     * @returns {Number}\n     */\n    average(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (average).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (average).');\n\n        return this.sum(dataSet) / dataSet.length;\n    }\n\n    /**\n     * Compute variance for dataSet.\n     *\n     * @param {Array} dataSet\n     * @returns {Number}\n     */\n    variance(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (variance).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (variance).');\n\n        const avg = this.average(dataSet);\n        const n = dataSet.length;\n\n        return this.sum(dataSet.map(value => Math.pow(value - avg, 2))) / n;\n    }\n\n    /**\n     * Compute standard deviation for dataSet.\n     *\n     * @param {Array} dataSet\n     * @returns {Number}\n     */\n    stdDeviation(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (stdDeviation).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (stdDeviation).');\n\n        return Math.sqrt(this.variance(dataSet));\n    }\n\n    /**\n     * Provided the quantile asked by the index given, if no index given, return all quantile of the dataSet.\n     *\n     * @param {Array} dataSet\n     * @param {Number} index\n     * @returns {Array}\n     */\n    quantile(dataSet, index = null) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (stdDeviation).');\n        if (index && (Number.isNaN(index) || index < 0 || index > 4)) throw new Error('index must be a number and between 1 - 4');\n\n        dataSet = dataSet.sort((a, b) => a - b);\n        return !index ?\n            [1, 2, 3, 4].map(i => dataSet[Math.ceil((dataSet.length * (i / 4))) - 1]) :\n            dataSet[Math.ceil((dataSet.length * (index / 4)) - 1)];\n    }\n\n    /**\n     * Provided the percentile asked by the index given, if no index given, return all percentile of the dataSet.\n     *\n     * @param {Array} dataSet\n     * @param {Number} index\n     * @returns {Array}\n     */\n    percentile(dataSet, index = null) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (stdDeviation).');\n        if (index && (Number.isNaN(index) || index < 0 || index > 100)) throw new Error('index must be a number and between 1 - 100');\n\n        dataSet = dataSet.sort((a, b) => a - b);\n        return !index ? Array.from({length: 99}, (v, k) => k + 1).map(i => dataSet[i]) : dataSet[Math.ceil((index / 100) * dataSet.length)];\n    }\n}\n\nmodule.exports = new Statistical();\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/statistical.js\n **/"],"sourceRoot":""}