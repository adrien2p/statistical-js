{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///statistical.min.js","webpack:///webpack/bootstrap cc9318f92acb1aa1dc8c","webpack:///./src/statistical.js","webpack:///./src/utils/cacheManager.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","cacheManager","Statistical","_settings","cacheEnabled","Proxy","get","propKey","__proto__","_len","arguments","args","Array","_key","cache","find","result","res","update","dataSet","Reflect","value","settings","method","param","Error","t","Date","getTime","begining","end","sum","mean","reduce","val","Number","isNaN","isArray","middle","Math","floor","isEven","sort","a","b","mode","counter","max","map","index","push","avg","n","pow","sqrt","variance","undefined","ceil","from","v","k","CacheManager","_cache","maxLength","options","_this","add","date","splice","some"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,OAAA,iBAAAH,GACA,gBAAAC,SACAA,QAAA,YAAAD,IAEAD,EAAA,YAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAP,WACAS,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,QAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASL,EAAQD,EAASM,GEtDhC,YF4DC,SAASS,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,MExD3hBkB,EAAe7B,EAAQ,GAEvB8B,EF4Da,WE1Df,QAAAA,KAEI,MAFUrB,GAAAX,KAAAgC,GACVhC,KAAKiC,WAAaC,cAAc,GACzB,GAAIC,OAAMnC,MACboC,IAAK,SAACnB,EAAQoB,GACV,MAAIA,KAAWpB,GAAOqB,UACX,WAAa,OAAAC,GAAAC,UAAApB,OAATqB,EAASC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAATF,EAASE,GAAAH,UAAAG,EAEhB,IAAMC,GAAQb,EAAac,KAAKR,EAASI,EAAK,GAC9C,IAAIG,EAAO,MAAOA,GAAME,MAExB,IAAMC,GAAM9B,EAAOoB,GAASI,EAC5BV,GAAaiB,OAAOX,GAAUY,QAASR,EAAK,GAAIK,OAAQC,KAIrDG,QAAQd,IAAInB,EAAQoB,MF0S1C,MAnOAtB,GAAaiB,IACTL,IAAK,cACLwB,MAAO,SE/DAC,GACRpD,KAAKiC,UAAUC,aAAekB,EAASlB,eAAgB,KF2EtDP,IAAK,cACLwB,MAAO,SElEAE,EAAQC,GAChB,IAAKD,EAAQ,KAAM,IAAIE,OAAM,sDAC7B,KAAKvD,KAAKqD,GAAS,KAAM,IAAIE,OAAJ,UAAoBF,EAApB,2DAEzB,IAAMG,GAAI,kBAAM,GAAIC,OAAOC,WAErBC,EAAWH,GACjBxD,MAAKqD,GAAQC,EACb,IAAMM,GAAMJ,GAEZ,OAAQI,GAAMD,EAAY,QF+EzBhC,IAAK,cACLwB,MAAO,WEtER,OACIU,IAAK,GACLC,KAAM,OFmFTnC,IAAK,MACLwB,MAAO,SE1ERF,GACA,MAAOA,GAAQc,OAAO,SAAChB,EAAKiB,GACxB,GAAIC,OAAOC,MAAMF,GAAM,KAAM,IAAIT,OAAM,uDACvC,OAAOR,GAAMiB,GACd,MFqFFrC,IAAK,SACLwB,MAAO,SE7ELF,GACH,IAAKA,EAAS,KAAM,IAAIM,OAAM,kDAC9B,KAAKb,MAAMyB,QAAQlB,GAAU,KAAM,IAAIM,OAAM,iDAE7C,IAAMa,GAASC,KAAKC,MAAMrB,EAAQ7B,OAAS,GACrCmD,EAAStB,EAAQ7B,OAAS,IAAM,CAItC,OAFA6B,GAAUA,EAAQuB,KAAK,SAACC,EAAGC,GAAJ,MAAUD,GAAIC,IAE9BH,GAAUtB,EAAQmB,EAAS,GAAKnB,EAAQmB,IAAW,EAAInB,EAAQmB,MF0FrEzC,IAAK,OACLwB,MAAO,QAASwB,GElFhB1B,GACD,IAAKA,EAAS,KAAM,IAAIM,OAAM,gDAC9B,KAAKb,MAAMyB,QAAQlB,GAAU,KAAM,IAAIM,OAAM,+CAE7C,IAAMqB,MACFD,KACAE,EAAM,CAcV,OAZA5B,GAAQ6B,IAAI,SAAC3B,EAAO4B,GACV9B,EAAQ8B,IAAUH,KAAUA,EAAQ3B,EAAQ8B,IAAU,GAE5DH,EAAQ3B,EAAQ8B,MAEZH,EAAQ3B,EAAQ8B,MAAYF,GAAKF,EAAKK,KAAK/B,EAAQ8B,IACnDH,EAAQ3B,EAAQ8B,IAAUF,IAC1BA,EAAMD,EAAQ3B,EAAQ8B,IACtBJ,GAAQ1B,EAAQ8B,OAIjBJ,KF6FNhD,IAAK,OACLwB,MAAO,SErFPF,GACD,IAAKA,EAAS,KAAM,IAAIM,OAAM,gDAC9B,KAAKb,MAAMyB,QAAQlB,GAAU,KAAM,IAAIM,OAAM,+CAE7C,OAAOvD,MAAK6D,IAAIZ,GAAWA,EAAQ7B,UFgGlCO,IAAK,WACLwB,MAAO,SExFHF,GACL,IAAKA,EAAS,KAAM,IAAIM,OAAM,oDAC9B,KAAKb,MAAMyB,QAAQlB,GAAU,KAAM,IAAIM,OAAM,mDAE7C,IAAM0B,GAAMjF,KAAK8D,KAAKb,GAChBiC,EAAIjC,EAAQ7B,MAElB,OAAOpB,MAAK6D,IAAIZ,EAAQ6B,IAAI,SAAA3B,GAAA,MAASkB,MAAKc,IAAIhC,EAAQ8B,EAAK,MAAOC,KFqGjEvD,IAAK,eACLwB,MAAO,SE7FCF,GACT,IAAKA,EAAS,KAAM,IAAIM,OAAM,wDAC9B,KAAKb,MAAMyB,QAAQlB,GAAU,KAAM,IAAIM,OAAM,uDAE7C,OAAOc,MAAKe,KAAKpF,KAAKqF,SAASpC,OFyG9BtB,IAAK,WACLwB,MAAO,SEhGHF,GAAuB,GAAd8B,GAAcvC,UAAApB,OAAA,GAAAkE,SAAA9C,UAAA,GAAAA,UAAA,GAAN,IACtB,KAAKS,EAAS,KAAM,IAAIM,OAAM,oDAC9B,IAAIwB,IAAUd,OAAOC,MAAMa,IAAUA,EAAQ,GAAKA,EAAQ,GAAI,KAAM,IAAIxB,OAAM,mEAG9E,OADAN,GAAUA,EAAQuB,KAAK,SAACC,EAAGC,GAAJ,MAAUD,GAAIC,IAC7BK,EAEJ9B,EAAQoB,KAAKkB,KAAMtC,EAAQ7B,QAAU2D,EAAQ,GAAM,KADlD,EAAG,EAAG,EAAG,GAAGD,IAAI,SAAA3D,GAAA,MAAK8B,GAAQoB,KAAKkB,KAAMtC,EAAQ7B,QAAUD,EAAI,IAAO,QFiHzEQ,IAAK,aACLwB,MAAO,SEvGDF,GAAuB,GAAd8B,GAAcvC,UAAApB,OAAA,GAAAkE,SAAA9C,UAAA,GAAAA,UAAA,GAAN,IACxB,KAAKS,EAAS,KAAM,IAAIM,OAAM,sDAC9B,IAAIwB,IAAUd,OAAOC,MAAMa,IAAUA,EAAQ,GAAKA,EAAQ,KAAM,KAAM,IAAIxB,OAAM,sEAGhF,OADAN,GAAUA,EAAQuB,KAAK,SAACC,EAAGC,GAAJ,MAAUD,GAAIC,IAC7BK,EAAyE9B,EAAQoB,KAAKkB,KAAMR,EAAQ,IAAO9B,EAAQ7B,SAA3GsB,MAAM8C,MAAMpE,OAAQ,IAAK,SAACqE,EAAGC,GAAJ,MAAUA,GAAI,IAAGZ,IAAI,SAAA3D,GAAA,MAAK8B,GAAQ9B,QFkH1EQ,IAAK,WACLS,IAAK,WE9RN,MAAOpC,MAAKiC,cFmSRD,IE/GZnC,GAAOD,QAAU,GAAIoC,IF+Hf,SAASnC,EAAQD,GG/UvB,YHqVC,SAASe,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,MGjV3hB8E,EHqVc,WGpVhB,QAAAA,KAAchF,EAAAX,KAAA2F,GACV3F,KAAK4F,UACL5F,KAAKiC,WACD4D,UAAW,IHkblB,MAhFA9E,GAAa4E,IACThE,IAAK,cAQLwB,MAAO,SGhVA2C,GACR,IAAKA,EAAS,KAAM,IAAIvC,OAAM,mDAC9BvD,MAAKiC,UAAU4D,UAAYC,EAAQD,WAAa,MH0V/ClE,IAAK,SACLwB,MAAO,SGnVLE,EAAQyC,GAAS,GAAAC,GAAA/F,IACpBA,MAAK4F,OAAOvC,GAAUrD,KAAK4F,OAAOvC,MAElC,IAAM2C,GAAM,SAAC3C,EAAQyC,GACjBC,EAAKH,OAAOvC,GAAQ2B,MAChBiB,MAAM,GAAIxC,OAAOC,UACjBT,QAAS6C,EAAQ7C,QACjBH,OAAQgD,EAAQhD,SAIpB9C,MAAK4F,OAAOvC,GAAQjC,OAASpB,KAAKiC,UAAU4D,UAC5CG,EAAI3C,EAAQyC,IAGZ9F,KAAK4F,OAAOM,OAAO,EAAG,GACtBF,EAAI3C,EAAQyC,OHmWfnE,IAAK,OACLwB,MAAO,SGxVPE,EAAQJ,GACT,GAAML,GAAQ5C,KAAK4F,OAAOvC,MAC1B,OAAOT,GAAMuD,KAAK,SAAAV,GAAA,MAAKA,GAAExC,UAAYA,OH6VpCtB,IAAK,WACLS,IAAK,WGvZN,MAAOpC,MAAKiC,aHkaXN,IAAK,QACLS,IAAK,WG1ZN,MAAOpC,MAAK4F,WH+ZRD,IG3WZ9F,GAAOD,QAAU,GAAI+F","file":"statistical.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"statistical\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"statistical\"] = factory();\n\telse\n\t\troot[\"statistical\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"statistical\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"statistical\"] = factory();\n\telse\n\t\troot[\"statistical\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar cacheManager = __webpack_require__(1);\n\t\n\tvar Statistical = function () {\n\t    function Statistical() {\n\t        _classCallCheck(this, Statistical);\n\t\n\t        this._settings = { cacheEnabled: true };\n\t        return new Proxy(this, {\n\t            get: function get(target, propKey) {\n\t                if (propKey in target.__proto__) {\n\t                    return function () {\n\t                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t                            args[_key] = arguments[_key];\n\t                        }\n\t\n\t                        /* find if a dataSet for a particular method exist in the cache and return it */\n\t                        var cache = cacheManager.find(propKey, args[0]);\n\t                        if (cache) return cache.result;\n\t\n\t                        var res = target[propKey](args);\n\t                        cacheManager.update(propKey, { dataSet: args[0], result: res });\n\t                    };\n\t                } else {\n\t                    /* it's not a method but a property, so we return the value of this property. */\n\t                    return Reflect.get(target, propKey);\n\t                }\n\t            }\n\t        });\n\t    }\n\t\n\t    _createClass(Statistical, [{\n\t        key: 'setSettings',\n\t        value: function setSettings(settings) {\n\t            this._settings.cacheEnabled = settings.cacheEnabled || true;\n\t        }\n\t\n\t        /**\n\t         * Return the execution time of the method asked by method with the param given\n\t         *\n\t         * @param {String} method\n\t         * @param {Array} param\n\t         * @returns {string}\n\t         */\n\t\n\t    }, {\n\t        key: 'performance',\n\t        value: function performance(method, param) {\n\t            if (!method) throw new Error('Missing parameter method (Statistical:performance).');\n\t            if (!this[method]) throw new Error('Method ' + method + ' doesn\\'t exist in statistical (Statistical:performance).');\n\t\n\t            var t = function t() {\n\t                return new Date().getTime();\n\t            };\n\t\n\t            var begining = t();\n\t            this[method](param);\n\t            var end = t();\n\t\n\t            return end - begining + 'ms';\n\t        }\n\t\n\t        /**\n\t         *\n\t         *\n\t         * @param dataSet\n\t         * @returns {{sum: string, mean: string}}\n\t         */\n\t\n\t    }, {\n\t        key: 'descriptive',\n\t        value: function descriptive() {\n\t            return {\n\t                sum: '',\n\t                mean: ''\n\t            };\n\t        }\n\t\n\t        /**\n\t         * Take array and return sum of each elements.\n\t         *\n\t         * @param dataSet\n\t         * @returns {*}\n\t         */\n\t\n\t    }, {\n\t        key: 'sum',\n\t        value: function sum(dataSet) {\n\t            return dataSet.reduce(function (res, val) {\n\t                if (Number.isNaN(val)) throw new Error('dataSet must contain only numbers (Statistical:sum).');\n\t                return res + val;\n\t            }, 0);\n\t        }\n\t\n\t        /**\n\t         * Compute median for dataSet, the central value.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {number}\n\t         */\n\t\n\t    }, {\n\t        key: 'median',\n\t        value: function median(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:median).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical:median).');\n\t\n\t            var middle = Math.floor(dataSet.length / 2);\n\t            var isEven = dataSet.length % 2 === 0;\n\t\n\t            dataSet = dataSet.sort(function (a, b) {\n\t                return a - b;\n\t            });\n\t\n\t            return isEven ? (dataSet[middle - 1] + dataSet[middle]) / 2 : dataSet[middle];\n\t        }\n\t\n\t        /**\n\t         * Get the value wit the miximum occurence.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {*}\n\t         */\n\t\n\t    }, {\n\t        key: 'mode',\n\t        value: function mode(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:mode).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical:mode).');\n\t\n\t            var counter = {};\n\t            var mode = [];\n\t            var max = 0;\n\t\n\t            dataSet.map(function (value, index) {\n\t                if (!(dataSet[index] in counter)) counter[dataSet[index]] = 0;\n\t\n\t                counter[dataSet[index]]++;\n\t\n\t                if (counter[dataSet[index]] === max) mode.push(dataSet[index]);\n\t                if (counter[dataSet[index]] > max) {\n\t                    max = counter[dataSet[index]];\n\t                    mode = [dataSet[index]];\n\t                }\n\t            });\n\t\n\t            return mode;\n\t        }\n\t\n\t        /**\n\t         * Compute mean for dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'mean',\n\t        value: function mean(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:mean).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical:mean).');\n\t\n\t            return this.sum(dataSet) / dataSet.length;\n\t        }\n\t\n\t        /**\n\t         * Compute variance for dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'variance',\n\t        value: function variance(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:variance).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical:variance).');\n\t\n\t            var avg = this.mean(dataSet);\n\t            var n = dataSet.length;\n\t\n\t            return this.sum(dataSet.map(function (value) {\n\t                return Math.pow(value - avg, 2);\n\t            })) / n;\n\t        }\n\t\n\t        /**\n\t         * Compute standard deviation for dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'stdDeviation',\n\t        value: function stdDeviation(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:stdDeviation).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical:stdDeviation).');\n\t\n\t            return Math.sqrt(this.variance(dataSet));\n\t        }\n\t\n\t        /**\n\t         * Provided the quantile asked by the index given, if no index given, return all quantile of the dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @param {Number} index\n\t         * @returns {Array}\n\t         */\n\t\n\t    }, {\n\t        key: 'quantile',\n\t        value: function quantile(dataSet) {\n\t            var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\t\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:quantile).');\n\t            if (index && (Number.isNaN(index) || index < 0 || index > 4)) throw new Error('index must be a number and between 1 - 4 (Statistical:quantile).');\n\t\n\t            dataSet = dataSet.sort(function (a, b) {\n\t                return a - b;\n\t            });\n\t            return !index ? [1, 2, 3, 4].map(function (i) {\n\t                return dataSet[Math.ceil(dataSet.length * (i / 4)) - 1];\n\t            }) : dataSet[Math.ceil(dataSet.length * (index / 4) - 1)];\n\t        }\n\t\n\t        /**\n\t         * Provided the percentile asked by the index given, if no index given, return all percentile of the dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @param {Number} index\n\t         * @returns {Array}\n\t         */\n\t\n\t    }, {\n\t        key: 'percentile',\n\t        value: function percentile(dataSet) {\n\t            var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\t\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:percentile).');\n\t            if (index && (Number.isNaN(index) || index < 0 || index > 100)) throw new Error('index must be a number and between 1 - 100 (Statistical:percentile)');\n\t\n\t            dataSet = dataSet.sort(function (a, b) {\n\t                return a - b;\n\t            });\n\t            return !index ? Array.from({ length: 99 }, function (v, k) {\n\t                return k + 1;\n\t            }).map(function (i) {\n\t                return dataSet[i];\n\t            }) : dataSet[Math.ceil(index / 100 * dataSet.length)];\n\t        }\n\t    }, {\n\t        key: 'settings',\n\t        get: function get() {\n\t            return this._settings;\n\t        }\n\t    }]);\n\t\n\t    return Statistical;\n\t}();\n\t\n\t/**\n\t * Export throught a proxy to intercept method call and manage cache\n\t *\n\t * @type {Proxy}\n\t */\n\t\n\t\n\tmodule.exports = new Statistical();\n\t\n\t//module.exports = statistical;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar CacheManager = function () {\n\t    function CacheManager() {\n\t        _classCallCheck(this, CacheManager);\n\t\n\t        this._cache = {};\n\t        this._settings = {\n\t            maxLength: 30\n\t        };\n\t    }\n\t\n\t    /**\n\t     * Return CacheManager settings\n\t     *\n\t     * @returns {{maxLength: number}|*}\n\t     */\n\t\n\t\n\t    _createClass(CacheManager, [{\n\t        key: 'setSettings',\n\t\n\t\n\t        /**\n\t         * Update existing settings to manage cache\n\t         *\n\t         * @param {*} options {maxLength: number}\n\t         */\n\t        value: function setSettings(options) {\n\t            if (!options) throw new Error('Missing parameter options (CacheManager:settings');\n\t            this._settings.maxLength = options.maxLength || 30;\n\t        }\n\t\n\t        /**\n\t         * Update the cache saved with new results\n\t         *\n\t         * @param {Object} options {dataSet: Array, result: number}\n\t         */\n\t\n\t    }, {\n\t        key: 'update',\n\t        value: function update(method, options) {\n\t            var _this = this;\n\t\n\t            this._cache[method] = this._cache[method] || [];\n\t\n\t            var add = function add(method, options) {\n\t                _this._cache[method].push({\n\t                    date: new Date().getTime(),\n\t                    dataSet: options.dataSet,\n\t                    result: options.result\n\t                });\n\t            };\n\t\n\t            if (this._cache[method].length < this._settings.maxLength) {\n\t                add(method, options);\n\t            } else {\n\t                /* remove the oldest cache saved before inserting the newest */\n\t                this._cache.splice(0, 1);\n\t                add(method, options);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Find an existing dataSet in the cache and return it\n\t         *\n\t         * @param {String} method\n\t         * @param {Array} dataSet\n\t         * @returns {*|boolean}\n\t         * @private\n\t         */\n\t\n\t    }, {\n\t        key: 'find',\n\t        value: function find(method, dataSet) {\n\t            var cache = this._cache[method] || [];\n\t            return cache.some(function (v) {\n\t                return v.dataSet === dataSet;\n\t            });\n\t        }\n\t    }, {\n\t        key: 'settings',\n\t        get: function get() {\n\t            return this._settings;\n\t        }\n\t\n\t        /**\n\t         * Return the entire cache\n\t         *\n\t         * @returns {{}|*}\n\t         */\n\t\n\t    }, {\n\t        key: 'cache',\n\t        get: function get() {\n\t            return this._cache;\n\t        }\n\t    }]);\n\t\n\t    return CacheManager;\n\t}();\n\t\n\tmodule.exports = new CacheManager();\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** statistical.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap cc9318f92acb1aa1dc8c\n **/","'use strict';\n\nconst cacheManager = require('./utils/cacheManager');\n\nclass Statistical {\n\n    constructor() {\n        this._settings = {cacheEnabled: true};\n        return new Proxy(this, {\n            get: (target, propKey) => {\n                if (propKey in target.__proto__) {\n                    return (...args) => {\n                        /* find if a dataSet for a particular method exist in the cache and return it */\n                        const cache = cacheManager.find(propKey, args[0]);\n                        if (cache) return cache.result;\n\n                        const res = target[propKey](args);\n                        cacheManager.update(propKey, {dataSet: args[0], result: res});\n                    };\n                } else {\n                    /* it's not a method but a property, so we return the value of this property. */\n                    return Reflect.get(target, propKey)\n                }\n            }\n        });\n    }\n\n    get settings() {\n        return this._settings;\n    }\n\n    setSettings(settings) {\n        this._settings.cacheEnabled = settings.cacheEnabled || true;\n    }\n\n    /**\n     * Return the execution time of the method asked by method with the param given\n     *\n     * @param {String} method\n     * @param {Array} param\n     * @returns {string}\n     */\n    performance(method, param) {\n        if (!method) throw new Error('Missing parameter method (Statistical:performance).');\n        if (!this[method]) throw new Error(`Method ${method} doesn't exist in statistical (Statistical:performance).`);\n\n        const t = () => new Date().getTime();\n\n        const begining = t();\n        this[method](param);\n        const end = t();\n\n        return (end - begining) + 'ms';\n    }\n\n    /**\n     *\n     *\n     * @param dataSet\n     * @returns {{sum: string, mean: string}}\n     */\n    descriptive() {\n        return {\n            sum: '',\n            mean: ''\n        };\n    }\n\n    /**\n     * Take array and return sum of each elements.\n     *\n     * @param dataSet\n     * @returns {*}\n     */\n    sum(dataSet) {\n        return dataSet.reduce((res, val) => {\n            if (Number.isNaN(val)) throw new Error('dataSet must contain only numbers (Statistical:sum).');\n            return res + val;\n        }, 0);\n    }\n\n    /**\n     * Compute median for dataSet, the central value.\n     *\n     * @param {Array} dataSet\n     * @returns {number}\n     */\n    median(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:median).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical:median).');\n\n        const middle = Math.floor(dataSet.length / 2);\n        const isEven = dataSet.length % 2 === 0;\n\n        dataSet = dataSet.sort((a, b) => a - b);\n\n        return isEven ? (dataSet[middle - 1] + dataSet[middle]) / 2 : dataSet[middle];\n    }\n\n    /**\n     * Get the value wit the miximum occurence.\n     *\n     * @param {Array} dataSet\n     * @returns {*}\n     */\n    mode(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:mode).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical:mode).');\n\n        const counter = {};\n        let mode = [];\n        let max = 0;\n\n        dataSet.map((value, index) => {\n            if (!(dataSet[index] in counter)) counter[dataSet[index]] = 0;\n\n            counter[dataSet[index]]++;\n\n            if (counter[dataSet[index]] === max) mode.push(dataSet[index]);\n            if (counter[dataSet[index]] > max) {\n                max = counter[dataSet[index]];\n                mode = [dataSet[index]];\n            }\n        });\n\n        return mode;\n    }\n\n    /**\n     * Compute mean for dataSet.\n     *\n     * @param {Array} dataSet\n     * @returns {Number}\n     */\n    mean(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:mean).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical:mean).');\n\n        return this.sum(dataSet) / dataSet.length;\n    }\n\n    /**\n     * Compute variance for dataSet.\n     *\n     * @param {Array} dataSet\n     * @returns {Number}\n     */\n    variance(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:variance).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical:variance).');\n\n        const avg = this.mean(dataSet);\n        const n = dataSet.length;\n\n        return this.sum(dataSet.map(value => Math.pow(value - avg, 2))) / n;\n    }\n\n    /**\n     * Compute standard deviation for dataSet.\n     *\n     * @param {Array} dataSet\n     * @returns {Number}\n     */\n    stdDeviation(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:stdDeviation).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical:stdDeviation).');\n\n        return Math.sqrt(this.variance(dataSet));\n    }\n\n    /**\n     * Provided the quantile asked by the index given, if no index given, return all quantile of the dataSet.\n     *\n     * @param {Array} dataSet\n     * @param {Number} index\n     * @returns {Array}\n     */\n    quantile(dataSet, index = null) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:quantile).');\n        if (index && (Number.isNaN(index) || index < 0 || index > 4)) throw new Error('index must be a number and between 1 - 4 (Statistical:quantile).');\n\n        dataSet = dataSet.sort((a, b) => a - b);\n        return !index ?\n            [1, 2, 3, 4].map(i => dataSet[Math.ceil((dataSet.length * (i / 4))) - 1]) :\n            dataSet[Math.ceil((dataSet.length * (index / 4)) - 1)];\n    }\n\n    /**\n     * Provided the percentile asked by the index given, if no index given, return all percentile of the dataSet.\n     *\n     * @param {Array} dataSet\n     * @param {Number} index\n     * @returns {Array}\n     */\n    percentile(dataSet, index = null) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:percentile).');\n        if (index && (Number.isNaN(index) || index < 0 || index > 100)) throw new Error('index must be a number and between 1 - 100 (Statistical:percentile)');\n\n        dataSet = dataSet.sort((a, b) => a - b);\n        return !index ? Array.from({length: 99}, (v, k) => k + 1).map(i => dataSet[i]) : dataSet[Math.ceil((index / 100) * dataSet.length)];\n    }\n}\n\n/**\n * Export throught a proxy to intercept method call and manage cache\n *\n * @type {Proxy}\n */\nmodule.exports = new Statistical();\n\n//module.exports = statistical;\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/statistical.js\n **/","'use strict';\n\nclass CacheManager {\n    constructor() {\n        this._cache = {};\n        this._settings = {\n            maxLength: 30\n        };\n    }\n\n    /**\n     * Return CacheManager settings\n     *\n     * @returns {{maxLength: number}|*}\n     */\n    get settings() {\n        return this._settings;\n    }\n\n    /**\n     * Return the entire cache\n     *\n     * @returns {{}|*}\n     */\n    get cache() {\n        return this._cache;\n    }\n\n    /**\n     * Update existing settings to manage cache\n     *\n     * @param {*} options {maxLength: number}\n     */\n    setSettings(options) {\n        if (!options) throw new Error('Missing parameter options (CacheManager:settings');\n        this._settings.maxLength = options.maxLength || 30;\n    }\n\n    /**\n     * Update the cache saved with new results\n     *\n     * @param {Object} options {dataSet: Array, result: number}\n     */\n    update(method, options) {\n        this._cache[method] = this._cache[method] || [];\n\n        const add = (method, options) => {\n            this._cache[method].push({\n                date: new Date().getTime(),\n                dataSet: options.dataSet,\n                result: options.result\n            });\n        };\n\n        if (this._cache[method].length < this._settings.maxLength) {\n            add(method, options);\n        } else {\n            /* remove the oldest cache saved before inserting the newest */\n            this._cache.splice(0, 1);\n            add(method, options);\n        }\n    }\n\n    /**\n     * Find an existing dataSet in the cache and return it\n     *\n     * @param {String} method\n     * @param {Array} dataSet\n     * @returns {*|boolean}\n     * @private\n     */\n    find(method, dataSet) {\n        const cache = this._cache[method] || [];\n        return cache.some(v => v.dataSet === dataSet);\n    }\n}\n\nmodule.exports = new CacheManager();\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/utils/cacheManager.js\n **/"],"sourceRoot":""}