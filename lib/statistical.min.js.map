{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///statistical.min.js","webpack:///webpack/bootstrap 7e26dcbf3838c5f24a01","webpack:///./src/statistical.js","webpack:///./src/utils/interceptor.js","webpack:///./src/utils/cacheManager.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","interceptor","cacheManager","Statistical","_settings","cache","enabled","rootElementCount","subElementCount","cacheBefore","value","dataSet","reduce","res","val","Number","isNaN","Error","Array","isArray","middle","Math","floor","isEven","sort","a","b","mode","counter","max","map","index","push","sum","avg","mean","n","pow","sqrt","variance","arguments","undefined","ceil","from","v","k","get","set","options","isNumber","settings","Interceptor","object","propertyExcluded","Proxy","propKey","isExcluded","some","includes","getPrototypeOf","apply","find","result","update","Reflect","CacheManager","_cache","method","keys","splice","date","Date","getTime"],"mappings":"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","file":"statistical.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"statistical\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"statistical\"] = factory();\n\telse\n\t\troot[\"statistical\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"statistical\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"statistical\"] = factory();\n\telse\n\t\troot[\"statistical\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar interceptor = __webpack_require__(1);\n\tvar cacheManager = __webpack_require__(2);\n\t\n\tvar Statistical = function () {\n\t    function Statistical() {\n\t        _classCallCheck(this, Statistical);\n\t\n\t        this._settings = {\n\t            cache: {\n\t                enabled: true,\n\t                rootElementCount: 10,\n\t                subElementCount: 30\n\t            }\n\t        };\n\t        return interceptor.cacheBefore(this, cacheManager, ['settings', 'cacheSettings']);\n\t    }\n\t\n\t    /**\n\t     * Return settings used in statistical class.\n\t     *\n\t     * @returns {*}\n\t     */\n\t\n\t\n\t    _createClass(Statistical, [{\n\t        key: 'sum',\n\t\n\t\n\t        /**\n\t         * Take array and return sum of each elements.\n\t         *\n\t         * @param dataSet\n\t         * @returns {*}\n\t         */\n\t        value: function sum(dataSet) {\n\t            return dataSet.reduce(function (res, val) {\n\t                if (Number.isNaN(val)) throw new Error('dataSet must contain only numbers (Statistical:sum).');\n\t                return res + val;\n\t            }, 0);\n\t        }\n\t\n\t        /**\n\t         * Compute median for dataSet, the central value.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {number}\n\t         */\n\t\n\t    }, {\n\t        key: 'median',\n\t        value: function median(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:median).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical:median).');\n\t\n\t            var middle = Math.floor(dataSet.length / 2);\n\t            var isEven = dataSet.length % 2 === 0;\n\t\n\t            dataSet = dataSet.sort(function (a, b) {\n\t                return a - b;\n\t            });\n\t\n\t            return isEven ? (dataSet[middle - 1] + dataSet[middle]) / 2 : dataSet[middle];\n\t        }\n\t\n\t        /**\n\t         * Get the value wit the miximum occurence.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {*}\n\t         */\n\t\n\t    }, {\n\t        key: 'mode',\n\t        value: function mode(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:mode).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical:mode).');\n\t\n\t            var counter = {};\n\t            var mode = [];\n\t            var max = 0;\n\t\n\t            dataSet.map(function (value, index) {\n\t                if (!(dataSet[index] in counter)) counter[dataSet[index]] = 0;\n\t\n\t                counter[dataSet[index]]++;\n\t\n\t                if (counter[dataSet[index]] === max) mode.push(dataSet[index]);\n\t                if (counter[dataSet[index]] > max) {\n\t                    max = counter[dataSet[index]];\n\t                    mode = [dataSet[index]];\n\t                }\n\t            });\n\t\n\t            return mode;\n\t        }\n\t\n\t        /**\n\t         * Compute mean for dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'mean',\n\t        value: function mean(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:mean).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical:mean).');\n\t\n\t            return this.sum(dataSet) / dataSet.length;\n\t        }\n\t\n\t        /**\n\t         * Compute variance for dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'variance',\n\t        value: function variance(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:variance).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical:variance).');\n\t\n\t            var avg = this.mean(dataSet);\n\t            var n = dataSet.length;\n\t\n\t            return this.sum(dataSet.map(function (value) {\n\t                return Math.pow(value - avg, 2);\n\t            })) / n;\n\t        }\n\t\n\t        /**\n\t         * Compute standard deviation for dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @returns {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'stdDeviation',\n\t        value: function stdDeviation(dataSet) {\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:stdDeviation).');\n\t            if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical:stdDeviation).');\n\t\n\t            return Math.sqrt(this.variance(dataSet));\n\t        }\n\t\n\t        /**\n\t         * Provided the quantile asked by the index given, if no index given, return all quantile of the dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @param {Number} index\n\t         * @returns {Array}\n\t         */\n\t\n\t    }, {\n\t        key: 'quantile',\n\t        value: function quantile(dataSet) {\n\t            var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\t\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:quantile).');\n\t            if (index && (Number.isNaN(index) || index < 0 || index > 4)) throw new Error('index must be a number and between 1 - 4 (Statistical:quantile).');\n\t\n\t            dataSet = dataSet.sort(function (a, b) {\n\t                return a - b;\n\t            });\n\t            return !index ? [1, 2, 3, 4].map(function (i) {\n\t                return dataSet[Math.ceil(dataSet.length * (i / 4)) - 1];\n\t            }) : dataSet[Math.ceil(dataSet.length * (index / 4) - 1)];\n\t        }\n\t\n\t        /**\n\t         * Provided the percentile asked by the index given, if no index given, return all percentile of the dataSet.\n\t         *\n\t         * @param {Array} dataSet\n\t         * @param {Number} index\n\t         * @returns {Array}\n\t         */\n\t\n\t    }, {\n\t        key: 'percentile',\n\t        value: function percentile(dataSet) {\n\t            var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\t\n\t            if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:percentile).');\n\t            if (index && (Number.isNaN(index) || index < 0 || index > 100)) throw new Error('index must be a number and between 1 - 100 (Statistical:percentile)');\n\t\n\t            dataSet = dataSet.sort(function (a, b) {\n\t                return a - b;\n\t            });\n\t            return !index ? Array.from({ length: 99 }, function (v, k) {\n\t                return k + 1;\n\t            }).map(function (i) {\n\t                return dataSet[i];\n\t            }) : dataSet[Math.ceil(index / 100 * dataSet.length)];\n\t        }\n\t    }, {\n\t        key: 'settings',\n\t        get: function get() {\n\t            return this._settings;\n\t        }\n\t\n\t        /**\n\t         * Allow to updates statistical settings.\n\t         *\n\t         * @param {*|object} options\n\t         */\n\t        ,\n\t        set: function set(options) {\n\t            if (!options && !options.cache) throw new Error('Missing parameter options (Statistical:settings');\n\t            if (!Number.isNumber(options.cache.rootElementCount)) throw new Error('rootElementCount must be a number (Statistical:settings');\n\t            if (!Number.isNumber(options.cache.subElementCount)) throw new Error('subElementCount must be a number (Statistical:settings');\n\t\n\t            this._settings = {\n\t                cache: {\n\t                    enabled: options.cache.enabled,\n\t                    rootElementCount: options.cache.rootElementCount || 10,\n\t                    subElementCount: options.cache.subElementCount || 30\n\t                }\n\t            };\n\t            cacheManager.settings = this._settings.cache;\n\t        }\n\t    }]);\n\t\n\t    return Statistical;\n\t}();\n\t\n\tmodule.exports = new Statistical();\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Interceptor = function () {\n\t    function Interceptor() {\n\t        _classCallCheck(this, Interceptor);\n\t    }\n\t\n\t    /**\n\t     * Create a proxy to wrap a class method and intercept each call.\n\t     *\n\t     * @param {object} object\n\t     * @param {object} cacheManager\n\t     * @param {Array} propertyExcluded\n\t     */\n\t\n\t\n\t    _createClass(Interceptor, [{\n\t        key: 'cacheBefore',\n\t        value: function cacheBefore(object, cacheManager, propertyExcluded) {\n\t            return new Proxy(object, {\n\t                get: function get(target, propKey) {\n\t                    var isExcluded = propertyExcluded.some(function (p) {\n\t                        return propKey.includes(p);\n\t                    });\n\t\n\t                    if (propKey in Object.getPrototypeOf(target) && !isExcluded) {\n\t                        return function () {\n\t                            var res = void 0;\n\t                            if (!object._settings.enabled) {\n\t                                var cache = cacheManager.find(propKey, arguments.length <= 0 ? undefined : arguments[0]);\n\t                                if (cache) return cache.result;\n\t\n\t                                res = target[propKey].apply(target, arguments);\n\t                                cacheManager.update(propKey, { dataSet: arguments.length <= 0 ? undefined : arguments[0], result: res });\n\t                            } else {\n\t                                res = target[propKey].apply(target, arguments);\n\t                            }\n\t\n\t                            return res;\n\t                        };\n\t                    } else {\n\t                        return Reflect.get(target, propKey);\n\t                    }\n\t                }\n\t            });\n\t        }\n\t    }]);\n\t\n\t    return Interceptor;\n\t}();\n\t\n\tmodule.exports = new Interceptor();\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar CacheManager = function () {\n\t    function CacheManager() {\n\t        _classCallCheck(this, CacheManager);\n\t\n\t        this._cache = {};\n\t        this._settings = {\n\t            rootElementCount: 10,\n\t            subElementCount: 30\n\t        };\n\t    }\n\t\n\t    /**\n\t     * Return CacheManager settings\n\t     *\n\t     * @returns {{maxLength: number}|*}\n\t     */\n\t\n\t\n\t    _createClass(CacheManager, [{\n\t        key: 'update',\n\t\n\t\n\t        /**\n\t         * Update the cache saved with new results\n\t         *\n\t         * @param method\n\t         * @param {Object} options\n\t         */\n\t        value: function update(method, options) {\n\t            if (Object.keys(this._cache).length >= this._settings.rootElementCount) delete this._cache[Object.keys(this._cache)[0]];\n\t            if (this._cache[method] && this._cache[method].length >= this._settings.subElementCount) this._cache[method].splice(0, 1);\n\t\n\t            this._cache[method] = this._cache[method] || [];\n\t            this._cache[method].push({\n\t                date: new Date().getTime(),\n\t                dataSet: options.dataSet,\n\t                result: options.result\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Find an existing dataSet in the cache and return it\n\t         *\n\t         * @param {String} method\n\t         * @param {Array} dataSet\n\t         * @returns {Object}\n\t         * @private\n\t         */\n\t\n\t    }, {\n\t        key: 'find',\n\t        value: function find(method, dataSet) {\n\t            var cache = this._cache[method] || [];\n\t\n\t            var res = null;\n\t            cache.some(function (v) {\n\t                if (v.dataSet === dataSet) {\n\t                    res = v;\n\t                    return true;\n\t                }\n\t\n\t                return false;\n\t            });\n\t\n\t            return res;\n\t        }\n\t    }, {\n\t        key: 'settings',\n\t        get: function get() {\n\t            return this._settings;\n\t        }\n\t\n\t        /**\n\t         * Return the entire cache\n\t         *\n\t         * @returns {{}|*}\n\t         */\n\t        ,\n\t\n\t\n\t        /**\n\t         * Update existing settings to manage cache\n\t         *\n\t         * @param {*} settings\n\t         */\n\t        set: function set(settings) {\n\t            if (!settings) throw new Error('Missing parameter options (CacheManager:settings');\n\t            this._settings = {\n\t                rootElementCount: settings.rootElementCount || 10,\n\t                subElementCount: settings.subElementCount || 30\n\t            };\n\t        }\n\t    }, {\n\t        key: 'cache',\n\t        get: function get() {\n\t            return this._cache;\n\t        }\n\t    }]);\n\t\n\t    return CacheManager;\n\t}();\n\t\n\tmodule.exports = new CacheManager();\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** statistical.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 7e26dcbf3838c5f24a01\n **/","'use strict';\n\nconst interceptor = require('./utils/interceptor');\nconst cacheManager = require('./utils/cacheManager');\n\nclass Statistical {\n\n    constructor() {\n        this._settings = {\n            cache: {\n                enabled: true,\n                rootElementCount: 10,\n                subElementCount: 30\n            }\n        };\n        return interceptor.cacheBefore(this, cacheManager, [\n            'settings',\n            'cacheSettings'\n        ]);\n    }\n\n    /**\n     * Return settings used in statistical class.\n     *\n     * @returns {*}\n     */\n    get settings() {\n        return this._settings;\n    }\n\n    /**\n     * Allow to updates statistical settings.\n     *\n     * @param {*|object} options\n     */\n    set settings(options) {\n        if (!options && !options.cache) throw new Error('Missing parameter options (Statistical:settings');\n        if (!Number.isNumber(options.cache.rootElementCount)) throw new Error('rootElementCount must be a number (Statistical:settings');\n        if (!Number.isNumber(options.cache.subElementCount)) throw new Error('subElementCount must be a number (Statistical:settings');\n\n        this._settings = {\n            cache: {\n                enabled: options.cache.enabled,\n                rootElementCount: options.cache.rootElementCount || 10,\n                subElementCount: options.cache.subElementCount || 30\n            }\n        };\n        cacheManager.settings = this._settings.cache;\n    }\n\n    /**\n     * Take array and return sum of each elements.\n     *\n     * @param dataSet\n     * @returns {*}\n     */\n    sum(dataSet) {\n        return dataSet.reduce((res, val) => {\n            if (Number.isNaN(val)) throw new Error('dataSet must contain only numbers (Statistical:sum).');\n            return res + val;\n        }, 0);\n    }\n\n    /**\n     * Compute median for dataSet, the central value.\n     *\n     * @param {Array} dataSet\n     * @returns {number}\n     */\n    median(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:median).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical:median).');\n\n        const middle = Math.floor(dataSet.length / 2);\n        const isEven = dataSet.length % 2 === 0;\n\n        dataSet = dataSet.sort((a, b) => a - b);\n\n        return isEven ? (dataSet[middle - 1] + dataSet[middle]) / 2 : dataSet[middle];\n    }\n\n    /**\n     * Get the value wit the miximum occurence.\n     *\n     * @param {Array} dataSet\n     * @returns {*}\n     */\n    mode(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:mode).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical:mode).');\n\n        const counter = {};\n        let mode = [];\n        let max = 0;\n\n        dataSet.map((value, index) => {\n            if (!(dataSet[index] in counter)) counter[dataSet[index]] = 0;\n\n            counter[dataSet[index]]++;\n\n            if (counter[dataSet[index]] === max) mode.push(dataSet[index]);\n            if (counter[dataSet[index]] > max) {\n                max = counter[dataSet[index]];\n                mode = [dataSet[index]];\n            }\n        });\n\n        return mode;\n    }\n\n    /**\n     * Compute mean for dataSet.\n     *\n     * @param {Array} dataSet\n     * @returns {Number}\n     */\n    mean(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:mean).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical:mean).');\n\n        return this.sum(dataSet) / dataSet.length;\n    }\n\n    /**\n     * Compute variance for dataSet.\n     *\n     * @param {Array} dataSet\n     * @returns {Number}\n     */\n    variance(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:variance).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical:variance).');\n\n        const avg = this.mean(dataSet);\n        const n = dataSet.length;\n\n        return this.sum(dataSet.map(value => Math.pow(value - avg, 2))) / n;\n    }\n\n    /**\n     * Compute standard deviation for dataSet.\n     *\n     * @param {Array} dataSet\n     * @returns {Number}\n     */\n    stdDeviation(dataSet) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:stdDeviation).');\n        if (!Array.isArray(dataSet)) throw new Error('dataSet must be an array (Statistical:stdDeviation).');\n\n        return Math.sqrt(this.variance(dataSet));\n    }\n\n    /**\n     * Provided the quantile asked by the index given, if no index given, return all quantile of the dataSet.\n     *\n     * @param {Array} dataSet\n     * @param {Number} index\n     * @returns {Array}\n     */\n    quantile(dataSet, index = null) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:quantile).');\n        if (index && (Number.isNaN(index) || index < 0 || index > 4)) throw new Error('index must be a number and between 1 - 4 (Statistical:quantile).');\n\n        dataSet = dataSet.sort((a, b) => a - b);\n        return !index ?\n            [1, 2, 3, 4].map(i => dataSet[Math.ceil((dataSet.length * (i / 4))) - 1]) :\n            dataSet[Math.ceil((dataSet.length * (index / 4)) - 1)];\n    }\n\n    /**\n     * Provided the percentile asked by the index given, if no index given, return all percentile of the dataSet.\n     *\n     * @param {Array} dataSet\n     * @param {Number} index\n     * @returns {Array}\n     */\n    percentile(dataSet, index = null) {\n        if (!dataSet) throw new Error('Missing parameter dataSet (Statistical:percentile).');\n        if (index && (Number.isNaN(index) || index < 0 || index > 100)) throw new Error('index must be a number and between 1 - 100 (Statistical:percentile)');\n\n        dataSet = dataSet.sort((a, b) => a - b);\n        return !index ? Array.from({length: 99}, (v, k) => k + 1).map(i => dataSet[i]) : dataSet[Math.ceil((index / 100) * dataSet.length)];\n    }\n}\n\n\nmodule.exports = new Statistical();\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/statistical.js\n **/","'use strict';\n\nclass Interceptor {\n    constructor() {}\n\n    /**\n     * Create a proxy to wrap a class method and intercept each call.\n     *\n     * @param {object} object\n     * @param {object} cacheManager\n     * @param {Array} propertyExcluded\n     */\n    cacheBefore(object, cacheManager, propertyExcluded) {\n        return new Proxy(object, {\n            get: (target, propKey) => {\n                const isExcluded = propertyExcluded.some(p => propKey.includes(p));\n\n                if (propKey in Object.getPrototypeOf(target) && !isExcluded) {\n                    return (...args) => {\n                        let res;\n                        if (!object._settings.enabled) {\n                            const cache = cacheManager.find(propKey, args[0]);\n                            if (cache) return cache.result;\n\n                            res = target[propKey](...args);\n                            cacheManager.update(propKey, {dataSet: args[0], result: res});\n                        } else {\n                            res = target[propKey](...args);\n                        }\n\n                        return res;\n                    };\n                } else {\n                    return Reflect.get(target, propKey);\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Interceptor();\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/utils/interceptor.js\n **/","'use strict';\n\nclass CacheManager {\n    constructor() {\n        this._cache = {};\n        this._settings = {\n            rootElementCount: 10,\n            subElementCount: 30\n        };\n    }\n\n    /**\n     * Return CacheManager settings\n     *\n     * @returns {{maxLength: number}|*}\n     */\n    get settings() {\n        return this._settings;\n    }\n\n    /**\n     * Return the entire cache\n     *\n     * @returns {{}|*}\n     */\n    get cache() {\n        return this._cache;\n    }\n\n    /**\n     * Update existing settings to manage cache\n     *\n     * @param {*} settings\n     */\n    set settings(settings) {\n        if (!settings) throw new Error('Missing parameter options (CacheManager:settings');\n        this._settings = {\n            rootElementCount: settings.rootElementCount || 10,\n            subElementCount: settings.subElementCount || 30\n        };\n    }\n\n    /**\n     * Update the cache saved with new results\n     *\n     * @param method\n     * @param {Object} options\n     */\n    update(method, options) {\n        if (Object.keys(this._cache).length >= this._settings.rootElementCount) delete this._cache[Object.keys(this._cache)[0]];\n        if (this._cache[method] && this._cache[method].length >= this._settings.subElementCount) this._cache[method].splice(0, 1);\n\n        this._cache[method] = this._cache[method] || [];\n        this._cache[method].push({\n            date: new Date().getTime(),\n            dataSet: options.dataSet,\n            result: options.result\n        });\n    }\n\n    /**\n     * Find an existing dataSet in the cache and return it\n     *\n     * @param {String} method\n     * @param {Array} dataSet\n     * @returns {Object}\n     * @private\n     */\n    find(method, dataSet) {\n        const cache = this._cache[method] || [];\n\n        let res = null;\n        cache.some(v => {\n            if (v.dataSet === dataSet) {\n                res = v;\n                return true;\n            }\n\n            return false;\n        });\n\n        return res;\n    }\n}\n\nmodule.exports = new CacheManager();\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/utils/cacheManager.js\n **/"],"sourceRoot":""}