{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 2ee8f6ff2e8b2761dd71","webpack:///./src/statistical.js","webpack:///./src/utils/hook.js","webpack:///./src/utils/cacheManager.js","webpack:///./src/utils/validator.js","webpack:///./src/methods/StatisticalMethod.js","webpack:///./src/constante/epsilon.js","webpack:///./src/constante/chiSquaredTable.js","webpack:///./src/machineLearning/Perceptron.js"],"names":["Statistical","_validator","_settings","cache","enabled","rootElementCount","subElementCount","options","settings","Perceptron","statistical","Hook","target","cacheManager","Proxy","get","property","res","find","result","update","dataSet","Reflect","hook","CacheManager","_cache","method","Object","keys","length","splice","push","date","Date","getTime","some","v","Validator","parameterName","value","rules","Error","map","r","Array","isArray","hasOnlyNumbers","includes","StatisticalMethod","_chiSquaredProbTable","_epsilon","sample","validate","sort","a","b","reduce","accumulator","current","middle","Math","floor","isEven","counter","mode","max","index","sum","avg","mean","n","pow","sqrt","variance","sortedSample","ceil","min","median","stdDeviation","quantile","q1","q3","factorialResult","i","sampleVariance","sample1","sample2","meanX","meanY","numerator","besselsCorrection","trials","probability","x","cumulativeProbability","cells","factorial","p","binomial","lambda","E","distributionType","significance","observedFrequencies","val","undefined","filter","sampleMean","hypothesizedDistribution","expectedFrequencies","entries","reduceRight","previous","chiSquared","c","degreesOfFreedom","mu","sd","sqrtSampleSize","m","sampleVarianceX","sampleVarianceY","weightedVariance","data","dataLength","slope","intersect","sumX","sumY","sumXX","sumXY","forEach","element","epsilon","chiSquaredTable","_bias","_learningRate","_weights","input","score","weight","in","prediction","predict","out","error"],"mappings":"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","file":"statistical.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"statistical\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"statistical\"] = factory();\n\telse\n\t\troot[\"statistical\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 2ee8f6ff2e8b2761dd71\n **/","'use strict';\n\nimport hook from './utils/hook';\nimport cacheManager from './utils/cacheManager';\nimport Validator from './utils/validator';\nimport StatisticalMethod from './methods/StatisticalMethod';\nimport Perceptron from './machineLearning/Perceptron';\n\nclass Statistical {\n    /**\n     * Create a new object that provide all method and configuration of the library.\n     */\n    constructor() {\n        this._validator = new Validator();\n        this._settings = {\n            cache: {\n                enabled: true,\n                rootElementCount: 10,\n                subElementCount: 30\n            }\n        };\n    }\n\n    /**\n     * Return settings used in statistical class.\n     *\n     * @returns {*}\n     */\n    get settings() {\n        return this._settings;\n    }\n\n    /**\n     * Allow to updates statistical settings.\n     *\n     * @param {object} options\n     * @param {object} options.cache - options about the cache\n     * @param {boolean} options.cache.enabled - enabled or disabled the cache\n     * @param {number} options.cache.rootElementCount - number of called method cached\n     * @param {number} options.cache.subElementCount - number of result for each called method cached\n     */\n    set settings(options) {\n        this._settings = {\n            cache: {\n                enabled: options.cache.enabled,\n                rootElementCount: options.cache.rootElementCount || this._settings.cache.rootElementCount,\n                subElementCount: options.cache.subElementCount || this._settings.cache.subElementCount\n            }\n        };\n        cacheManager.settings = this._settings.cache;\n    }\n\n    /**\n     * Basics plus advanced statistics are provided in this member.\n     *\n     * @returns {*}\n     */\n    get methods() {\n        return hook.cache(new StatisticalMethod(), cacheManager);\n    }\n\n    /**\n     * Predictive model are provided in this member.\n     *\n     * @returns {{Perceptron: Perceptron}}\n     */\n    get ml() {\n        return {\n            Perceptron: Perceptron\n        };\n    }\n}\n\nconst statistical = new Statistical();\nexport default statistical;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/statistical.js\n **/","'use strict';\n\nclass Hook {\n    constructor() {}\n\n    /**\n     * Create a proxy to wrap a class method and intercept each call.\n     *\n     * @param {object} target\n     * @param {object} cacheManager\n     */\n    cache(target, cacheManager) {\n        return new Proxy(target, {\n            get: (target, property) => {\n                if (property in target && typeof target[property] === 'function') {\n                    return (...args) => {\n                        let res;\n                        if (cacheManager.settings.enabled) {\n                            const cache = cacheManager.find(property, args[0]);\n                            if (cache) return cache.result;\n\n                            res = target[property](...args);\n                            cacheManager.update(property, {dataSet: args[0], result: res});\n                        } else {\n                            res = target[property](...args);\n                        }\n\n                        return res;\n                    };\n                } else {\n                    return Reflect.get(target, property);\n                }\n            }\n        });\n    }\n}\n\nconst hook = new Hook();\nexport default hook;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/utils/hook.js\n **/","'use strict';\n\nimport Validator from './validator';\n\nclass CacheManager {\n    constructor() {\n        this._validator = new Validator();\n        this._cache = {};\n        this._settings = {\n            enabled: true,\n            rootElementCount: 10,\n            subElementCount: 30\n        };\n    }\n\n    /**\n     * Return CacheManager settings.\n     *\n     * @returns {{maxLength: number}|*}\n     */\n    get settings() {\n        return this._settings;\n    }\n\n    /**\n     * Return the entire cache\n     *\n     * @returns {{}|*}\n     */\n    get cache() {\n        return this._cache;\n    }\n\n    /**\n     * Update existing settings to manage cache.\n     *\n     * @param {*} options\n     */\n    set settings(options) {\n        this._settings = {\n            enabled: options.enabled,\n            rootElementCount: options.rootElementCount || this._settings.rootElementCount,\n            subElementCount: options.subElementCount || this._settings.subElementCount\n        };\n    }\n\n    /**\n     * Update the cache saved with new results.\n     *\n     * @param {string} method\n     * @param {Object} options\n     */\n    update(method, options) {\n        if (Object.keys(this._cache).length >= this._settings.rootElementCount) delete this._cache[Object.keys(this._cache)[0]];\n        if (this._cache[method] && this._cache[method].length >= this._settings.subElementCount) this._cache[method].splice(0, 1);\n\n        this._cache[method] = this._cache[method] || [];\n        this._cache[method].push({\n            date: new Date().getTime(),\n            dataSet: options.dataSet,\n            result: options.result\n        });\n    }\n\n    /**\n     * Find an existing dataSet in the cache and return it.\n     *\n     * @param {String} method\n     * @param {Array} dataSet\n     * @returns {Object}\n     */\n    find(method, dataSet) {\n        const cache = this._cache[method] || [];\n\n        let res = null;\n        cache.some(v => {\n            if (v.dataSet === dataSet) {\n                res = v;\n                return true;\n            }\n\n            return false;\n        });\n\n        return res;\n    }\n\n    /**\n     * Reset the cache to be empty.\n     */\n    reset() {\n        this._cache = {};\n    }\n}\n\nconst cacheManager = new CacheManager();\nexport default cacheManager;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/utils/cacheManager.js\n **/","'use strict';\n\nclass Validator {\n    constructor() {}\n\n    /**\n     * Valid a value with rules given, if the rules are not respected throw an error.\n     *\n     * @param {string} parameterName\n     * @param {*} value\n     * @param {Array} ruless\n     */\n    validate(parameterName, value, rules) {\n        if (typeof value === 'undefined') throw new Error('Missing parameter ' + parameterName);\n\n        rules.map(r => {\n            switch (r) {\n                case 'isArray':\n                    if (!Array.isArray(value)) throw new Error(`Parameter ${parameterName} must be an array`);\n                    break;\n                case 'isNumber':\n                    if (typeof value !== 'number') throw new Error(`Parameter ${parameterName} must be a number`);\n                    break;\n                case 'isString':\n                    if (typeof value !== 'string') throw new Error(`Parameter ${parameterName} must be a string`);\n                    break;\n                case 'isFunction':\n                    if (typeof value !== 'function') throw new Error(`Parameter ${parameterName} must be a function`);\n                    break;\n                case 'length > 0':\n                    if (value.length === 0) throw new Error(`Parameter ${parameterName} must have more than 0 values`);\n                    break;\n                case 'positive':\n                    if (value < 0) throw new Error(`Parameter ${parameterName} must be positive`);\n                    break;\n                case 'strictlyPositive':\n                    if (value <= 0) throw new Error(`Parameter ${parameterName} must be strictly positive`);\n                    break;\n                case 'length =':\n                    if (value[0].length !== value[1].length) throw new Error(`Parameter ${parameterName} must have the same number of values`);\n                    break;\n                default:\n                    if (Array.isArray(r)) {\n                        const hasOnlyNumbers = !(r.map(v => typeof v === 'number').includes(false));\n                        if (hasOnlyNumbers) {\n                            if (r.length === 2) {\n                                if (value < r[0] || value > r[1]) throw new Error(`Parameter ${parameterName} must fall between ${r[0]} and ${r[1]}`);\n                            }\n                        }\n                    } else {\n                        throw new Error('Rule not implemented : ' + r);\n                    }\n            }\n        });\n    }\n}\n\nexport default Validator;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/utils/validator.js\n **/","'use strict';\n\nimport Validator from '../utils/validator';\nimport epsilon from '../constante/epsilon';\nimport chiSquaredTable from '../constante/chiSquaredTable';\n\nclass StatisticalMethod {\n    /**\n     * Create a new object that provide all statistical methods.\n     */\n    constructor() {\n        this._validator = new Validator();\n        this._chiSquaredProbTable = chiSquaredTable;\n        this._epsilon = epsilon;\n    }\n\n    /**\n     * Return table of chi squared prob.\n     *\n     * @returns {*}\n     */\n    get chiSquaredProbTable() {\n        return this._chiSquaredProbTable;\n    }\n\n    /**\n     * Return the smallest value of the sample.\n     *\n     * @param {Array} sample\n     * @returns {number}\n     */\n    min(sample) {\n        this._validator.validate('sample', sample, ['isArray', 'length > 0']);\n        return sample.sort((a, b) => a - b)[0];\n    }\n\n    /**\n     * Return the biggest value of the sample.\n     *\n     * @param {Array} sample\n     * @returns {number}\n     */\n    max(sample) {\n        this._validator.validate('sample', sample, ['isArray', 'length > 0']);\n        return sample.sort((a, b) => a + b)[0];\n    }\n\n\n    /**\n     * The [Sum](https://en.wikipedia.org/wiki/Sum).\n     *\n     * @param sample\n     * @returns {*}\n     */\n    sum(sample) {\n        this._validator.validate('sample', sample, ['isArray', 'length > 0']);\n        return sample.reduce((accumulator, current) => accumulator + current, 0);\n    }\n\n    /**\n     * The [Median](https://en.wikipedia.org/wiki/Median).\n     *\n     * @param {Array} sample\n     * @returns {number}\n     */\n    median(sample) {\n        this._validator.validate('sample', sample, ['isArray', 'length > 0']);\n\n        const middle = Math.floor(sample.length / 2);\n        const isEven = sample.length % 2 === 0;\n\n        sample = sample.sort((a, b) => a - b);\n\n        return isEven ? (sample[middle - 1] + sample[middle]) / 2 : sample[middle];\n    }\n\n    /**\n     * The [Mode](https://en.wikipedia.org/wiki/Mode).\n     *\n     * @param {Array} sample\n     * @returns {*}\n     */\n    mode(sample) {\n        this._validator.validate('sample', sample, ['isArray', 'length > 0']);\n\n        const counter = {};\n        let mode = [];\n        let max = 0;\n\n        sample.map((value, index) => {\n            if (!(sample[index] in counter)) counter[sample[index]] = 0;\n\n            counter[sample[index]]++;\n\n            if (counter[sample[index]] === max) mode.push(sample[index]);\n            if (counter[sample[index]] > max) {\n                max = counter[sample[index]];\n                mode = [sample[index]];\n            }\n        });\n\n        return mode.length > 1 ? mode : mode[0];\n    }\n\n    /**\n     * The [Mean](https://en.wikipedia.org/wiki/Mean).\n     *\n     * @param {Array} sample\n     * @returns {number}\n     */\n    mean(sample) {\n        this._validator.validate('sample', sample, ['isArray', 'length > 0']);\n\n        return this.sum(sample) / sample.length;\n    }\n\n    /**\n     * The [Variance](https://en.wikipedia.org/wiki/Variance).\n     *\n     * @param {Array} sample\n     * @returns {number}\n     */\n    variance(sample) {\n        this._validator.validate('sample', sample, ['isArray', 'length > 0']);\n\n        const avg = this.mean(sample);\n        const n = sample.length;\n\n        return this.sum(sample.map(value => Math.pow(value - avg, 2))) / n;\n    }\n\n    /**\n     * The [Standard Deviation](https://en.wikipedia.org/wiki/Standard_deviation).\n     *\n     * @param {Array} sample\n     * @returns {number}\n     */\n    stdDeviation(sample) {\n        this._validator.validate('sample', sample, ['isArray', 'length > 0']);\n        return Math.sqrt(this.variance(sample));\n    }\n\n    /**\n     * The [Quantile](http://en.wikipedia.org/wiki/Quantile).\n     *\n     * @param {Array} sample\n     * @param {number} index\n     * @returns {Array}\n     */\n    quantile(sample, index) {\n        this._validator.validate('sample', sample, ['isArray', 'length > 0']);\n        this._validator.validate('index', index, ['isNumber', [0, 1]]);\n\n        const sortedSample = sample.sort((a, b) => a - b);\n\n        return sortedSample[Math.ceil((sample.length * index) - 1)];\n    }\n\n    /**\n     * The [Percentile](https://en.wikipedia.org/wiki/Percentile).\n     *\n     * @param {Array} sample\n     * @param {number} index\n     * @returns {Array}\n     */\n    percentile(sample, index) {\n        this._validator.validate('sample', sample, ['isArray', 'length > 0']);\n        this._validator.validate('index', index, ['isNumber', [0, 100]]);\n\n        const sortedSample = sample.sort((a, b) => a - b);\n        return sortedSample[Math.ceil((index / 100) * sample.length)];\n    }\n\n    /**\n     * Return the entire result of descriptives statistics above.\n     *\n     * @param {Array} sample\n     * @returns {{min: number, max: number, sum: *, median: number, mode: *, mean: number, variance: number, stdDeviation: number, quantile: Array}}\n     */\n    summary(sample) {\n        this._validator.validate('sample', sample, ['isArray', 'length > 0']);\n\n        return {\n            min: this.min(sample),\n            max: this.max(sample),\n            sum: this.sum(sample),\n            median: this.median(sample),\n            mode: this.mode(sample),\n            mean: this.mean(sample),\n            variance: this.variance(sample),\n            stdDeviation: this.stdDeviation(sample),\n            quantile: {\n                q1: this.quantile(sample, 0.25),\n                q3: this.quantile(sample, 0.75)\n            }\n        };\n    }\n\n    /**\n     * The [Factorial](https://en.wikipedia.org/wiki/Factorial).\n     *\n     * @param {number} n\n     * @returns {number}\n     */\n    factorial(n) {\n        this._validator.validate('n', n, ['isNumber', 'positive']);\n\n        let factorialResult = 1;\n        for (let i = 2; i <= n; i++) {\n            factorialResult *= i;\n        }\n\n        return factorialResult;\n    }\n\n    /**\n     * The [Geometric Mean](https://en.wikipedia.org/wiki/Geometric_mean).\n     *\n     * @param {Array} sample\n     * @returns {number}\n     */\n    geometricMean(sample) {\n        this._validator.validate('sample', sample, ['isArray', 'length > 0']);\n        return Math.pow(sample.reduce((accumulator, current) => accumulator * current, 1), 1 / sample.length);\n    }\n\n    /**\n     * The [Harmonic Mean](https://en.wikipedia.org/wiki/Harmonic_mean).\n     *\n     * @param {Array} sample\n     * @returns {number}\n     */\n    harmonicMean(sample) {\n        this._validator.validate('sample', sample, ['isArray', 'length > 0']);\n        return sample.length / sample.reduce((accumulator, current) => accumulator + (1 / current), 0);\n    }\n\n    /**\n     * The [Interquartile range](http://en.wikipedia.org/wiki/Interquartile_range)\n     *\n     * @param sample\n     * @returns {number}\n     */\n    interQuartileRange(sample) {\n        this._validator.validate('sample', sample, ['isArray', 'length > 0']);\n        return this.quantile(sample, 0.75) - this.quantile(sample, 0.25);\n    }\n\n    /**\n     * The [Variance](https://en.wikipedia.org/wiki/Harmonic_mean).\n     * The [Biais](https://fr.wikipedia.org/wiki/Estimateur_(statistique)#Biais).\n     *\n     * Non biased variance\n     *\n     * @param {Array} sample\n     * @returns {number}\n     */\n    sampleVariance(sample) {\n        this._validator.validate('sample', sample, ['isArray', 'length > 0']);\n\n        const avg = this.mean(sample);\n        const n = sample.length - 1;\n\n        return this.sum(sample.map(value => Math.pow(value - avg, 2))) / n;\n    }\n\n    /**\n     * The [Standard Deviation](https://en.wikipedia.org/wiki/Standard_deviation).\n     * The [Biais](https://fr.wikipedia.org/wiki/Estimateur_(statistique)#Biais).\n     *\n     * Non biased std deviation\n     *\n     * @param {Array} sample\n     * @returns {number}\n     */\n    sampleStdDeviation(sample) {\n        this._validator.validate('sample', sample, ['isArray', 'length > 0']);\n        return Math.sqrt(this.sampleVariance(sample));\n    }\n\n    /**\n     * The [Sample covariance](https://en.wikipedia.org/wiki/Sample_mean_and_sampleCovariance) of two datasets:\n     *\n     * @param {Array} sample1\n     * @param {Array} sample2\n     * @returns {number}\n     */\n    covariance(sample1, sample2) {\n        this._validator.validate('sample1', sample1, ['isArray', 'length > 0']);\n        this._validator.validate('sample2', sample2, ['isArray', 'length > 0']);\n        this._validator.validate('sample1 and sample2', [sample1, sample2], ['length =']);\n\n        const meanX = this.mean(sample1);\n        const meanY = this.mean(sample2);\n\n        const numerator = sample1.reduce((accumulator, current, i) => {\n            accumulator += (current - meanX) * (sample2[i] - meanY);\n            return accumulator;\n        }, 0);\n\n        const besselsCorrection = sample1.length - 1;\n\n        return numerator / besselsCorrection;\n    }\n\n    /**\n     * The [Binomial Distribution](http://en.wikipedia.org/wiki/Binomial_distribution).\n     *\n     * @param {number} trials\n     * @param {number} probability\n     * @returns {{}}\n     */\n    binomial(trials, probability) {\n        this._validator.validate('trials', trials, ['isNumber']);\n        this._validator.validate('probability', probability, ['isNumber', [0, 1]]);\n\n        let x = 0;\n        let cumulativeProbability = 0;\n        const cells = {};\n\n        do {\n            cells[x] = this.factorial(trials) / (this.factorial(x) * this.factorial(trials - x)) * (Math.pow(probability, x) * Math.pow(1 - probability, trials - x));\n            cumulativeProbability += cells[x];\n            x++;\n        } while (cumulativeProbability < 1 - this._epsilon);\n\n        return cells;\n    }\n\n    /**\n     * The [Bernoulli distribution](http://en.wikipedia.org/wiki/Bernoulli_distribution).\n     *\n     * @param {number} p\n     * @returns {Object}\n     */\n    bernoulli(p) {\n        this._validator.validate('p', p, ['isNumber', [0, 1]]);\n        return this.binomial(1, p);\n    }\n\n    /**\n     * The [Poisson Distribution](http://en.wikipedia.org/wiki/Poisson_distribution).\n     *\n     * @param {number} lambda\n     * @returns {{}}\n     */\n    poisson(lambda) {\n        this._validator.validate('lambda', lambda, ['strictlyPositive']);\n\n        let x = 0;\n        let cumulativeProbability = 0;\n        let cells = {};\n\n        do {\n            cells[x] = (Math.pow(Math.E, -lambda) * Math.pow(lambda, x)) / this.factorial(x);\n            cumulativeProbability += cells[x];\n            x++;\n        } while (cumulativeProbability < 1 - this._epsilon);\n\n        return cells;\n    }\n\n    /**\n     * The [χ2 (Chi-Squared) Goodness-of-Fit Test](http://en.wikipedia.org/wiki/Goodness_of_fit#Pearson.27s_chi-squared_test).\n     * return if data follow a specified distribution\n     *\n     * @param {Array} sample\n     * @param {Function} distributionType\n     * @param {number} significance\n     * @returns {boolean}\n     *\n     * @exemple\n     * chiSquaredGoodnessOfFit(sample, 'poisson', 0.05)); //= false\n     */\n    chiSquaredGoodnessOfFit(sample, distributionType, significance) {\n        this._validator.validate('sample', sample, ['isArray', 'length > 0']);\n        this._validator.validate('distributionType', distributionType, ['isFunction']);\n        this._validator.validate('significance', significance, ['isNumber', 'positive']);\n\n        /* Generate an array with number of ocurences for each data in sample. */\n        let observedFrequencies = [];\n        observedFrequencies = sample.reduce((accumulator, val) => {\n            if (accumulator[val] === undefined) accumulator[val] = 0;\n            accumulator[val] += 1;\n            return accumulator;\n        }, []).filter(v => v !== undefined);\n\n        /* number of hypothesized distribution parameters estimated, expected to be supplied in the distribution test. */\n        /* Lose one degree of freedom for estimating `lambda` from the sample data. */\n        const sampleMean = this.mean(sample);\n\n        /* The hypothesized distribution. Generate the hypothesized distribution. */\n        const hypothesizedDistribution = distributionType(sampleMean);\n\n        /* Create an array holding a histogram of expected data given the */\n        /* sample size and hypothesized distribution. */\n        let expectedFrequencies = [];\n        expectedFrequencies = Object.entries(hypothesizedDistribution).reduce((accumulator, current, i) => {\n            if (observedFrequencies[i]) accumulator[i] = current[1] * sample.length;\n            return accumulator;\n        }, []);\n\n        /* Concat frequencies < 3 with the previous one */\n        expectedFrequencies = Object.entries(expectedFrequencies).reduceRight((previous, current) => {\n            if (previous[1] < 3) current[1] += previous[1];\n            return current;\n        });\n\n        /* Compute chiSquared value */\n        let chiSquared = 0;\n        chiSquared = Object.entries(observedFrequencies).reduce((accumulator, current, i) => {\n            accumulator += Math.pow((current[1] - expectedFrequencies[i]), 2) / expectedFrequencies[i];\n            return accumulator;\n        }, chiSquared);\n\n        const c = 1;\n        const degreesOfFreedom = Object.keys(observedFrequencies).length - c - 1;\n\n        return this._chiSquaredProbTable[degreesOfFreedom][significance] < chiSquared;\n    }\n\n    /**\n     * The [a one-sample t-test](https://en.wikipedia.org/wiki/Student%27s_t-test#One-sample_t-test).\n     *\n     * @param {Array} sample\n     * @param {number} mu\n     * @returns {number}\n     */\n    tTestOneSample(sample, mu) {\n        this._validator.validate('sample', sample, ['isArray', 'length > 0']);\n        this._validator.validate('mu', mu, ['isNumber']);\n\n        const mean = this.mean(sample);\n        const sd = this.stdDeviation(sample);\n        const sqrtSampleSize = Math.sqrt(sample.length);\n\n        /* t-value */\n        return (mean - mu) / (sd / sqrtSampleSize);\n    }\n\n    /**\n     * The [two sample t-test](http://en.wikipedia.org/wiki/Student's_t-test).\n     *\n     * @param {Array} sample1\n     * @param {Array} sample2\n     * @returns {number}\n     */\n    tTestTwoSample(sample1, sample2) {\n        this._validator.validate('sample1', sample1, ['isArray', 'length > 0']);\n        this._validator.validate('sample2', sample2, ['isArray', 'length > 0']);\n\n        const n = sample1.length;\n        const m = sample2.length;\n        const meanX = this.mean(sample1);\n        const meanY = this.mean(sample2);\n        const sampleVarianceX = this.sampleVariance(sample1);\n        const sampleVarianceY = this.sampleVariance(sample2);\n\n        const weightedVariance = (((n - 1) * sampleVarianceX) + ((m - 1) * sampleVarianceY)) / (n + m - 2);\n\n        /* t-value */\n        return (meanX - meanY) / Math.sqrt(weightedVariance * (1 / (n + 1) / m));\n    }\n\n\n    /**\n     * [Simple linear regression](http://en.wikipedia.org/wiki/Simple_linear_regression)\n     *\n     * @param {Array<Array<number>>} data\n     * @returns {*}\n     */\n    linearRegression(data) {\n        this._validator.validate('data', data, ['isArray']);\n\n        const dataLength = data.length;\n\n        /* 1 element, the result will be a slope to 0 and an intersect ot the second coordinate elements */\n        if (dataLength === 1) return { slope, intersect: data[0][1] };\n\n        /* Compute all sum, and finally the slope and intersect */\n        let sumX = 0, sumY = 0, sumXX = 0, sumXY = 0;\n\n        data.forEach(element => {\n            sumX += element[0];\n            sumY += element[1];\n\n            sumXX += Math.pow(element[0], 2);\n            sumXY += element[0] * element[1];\n        });\n\n        const slope = ((dataLength * sumXY) - (sumX * sumY)) / ((dataLength * sumXX) - (sumX * sumX));\n        const intersect = (sumY / dataLength) - ((slope * sumX) / dataLength);\n\n        // Return both values as an object.\n        return { slope, intersect };\n    }\n}\n\nexport default StatisticalMethod;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/methods/StatisticalMethod.js\n **/","/**\n * We use `ε`, epsilon, as a stopping criterion when we want to iterate\n * until we're \"close enough\". Epsilon is a very small number: for\n * simple statistics, that number is **0.0001**\n *\n * This is used in calculations like the binomialDistribution, in which\n * the process of finding a value is [iterative](https://en.wikipedia.org/wiki/Iterative_method):\n * it progresses until it is close enough.\n *\n * @type {number}\n */\nconst epsilon = 0.0001;\nexport default epsilon;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/constante/epsilon.js\n **/","'use strict';\n\n/**\n * The [χ2 (Chi-Squared) Distribution](http://en.wikipedia.org/wiki/Chi-squared_distribution)\n *\n * @type {*}\n */\nconst chiSquaredTable = {\n    '1': {\n        '0.995': 0,\n        '0.99': 0,\n        '0.975': 0,\n        '0.95': 0,\n        '0.9': 0.02,\n        '0.5': 0.45,\n        '0.1': 2.71,\n        '0.05': 3.84,\n        '0.025': 5.02,\n        '0.01': 6.63,\n        '0.005': 7.88\n    },\n    '2': {\n        '0.995': 0.01,\n        '0.99': 0.02,\n        '0.975': 0.05,\n        '0.95': 0.1,\n        '0.9': 0.21,\n        '0.5': 1.39,\n        '0.1': 4.61,\n        '0.05': 5.99,\n        '0.025': 7.38,\n        '0.01': 9.21,\n        '0.005': 10.6\n    },\n    '3': {\n        '0.995': 0.07,\n        '0.99': 0.11,\n        '0.975': 0.22,\n        '0.95': 0.35,\n        '0.9': 0.58,\n        '0.5': 2.37,\n        '0.1': 6.25,\n        '0.05': 7.81,\n        '0.025': 9.35,\n        '0.01': 11.34,\n        '0.005': 12.84\n    },\n    '4': {\n        '0.995': 0.21,\n        '0.99': 0.3,\n        '0.975': 0.48,\n        '0.95': 0.71,\n        '0.9': 1.06,\n        '0.5': 3.36,\n        '0.1': 7.78,\n        '0.05': 9.49,\n        '0.025': 11.14,\n        '0.01': 13.28,\n        '0.005': 14.86\n    },\n    '5': {\n        '0.995': 0.41,\n        '0.99': 0.55,\n        '0.975': 0.83,\n        '0.95': 1.15,\n        '0.9': 1.61,\n        '0.5': 4.35,\n        '0.1': 9.24,\n        '0.05': 11.07,\n        '0.025': 12.83,\n        '0.01': 15.09,\n        '0.005': 16.75\n    },\n    '6': {\n        '0.995': 0.68,\n        '0.99': 0.87,\n        '0.975': 1.24,\n        '0.95': 1.64,\n        '0.9': 2.2,\n        '0.5': 5.35,\n        '0.1': 10.65,\n        '0.05': 12.59,\n        '0.025': 14.45,\n        '0.01': 16.81,\n        '0.005': 18.55\n    },\n    '7': {\n        '0.995': 0.99,\n        '0.99': 1.25,\n        '0.975': 1.69,\n        '0.95': 2.17,\n        '0.9': 2.83,\n        '0.5': 6.35,\n        '0.1': 12.02,\n        '0.05': 14.07,\n        '0.025': 16.01,\n        '0.01': 18.48,\n        '0.005': 20.28\n    },\n    '8': {\n        '0.995': 1.34,\n        '0.99': 1.65,\n        '0.975': 2.18,\n        '0.95': 2.73,\n        '0.9': 3.49,\n        '0.5': 7.34,\n        '0.1': 13.36,\n        '0.05': 15.51,\n        '0.025': 17.53,\n        '0.01': 20.09,\n        '0.005': 21.96\n    },\n    '9': {\n        '0.995': 1.73,\n        '0.99': 2.09,\n        '0.975': 2.7,\n        '0.95': 3.33,\n        '0.9': 4.17,\n        '0.5': 8.34,\n        '0.1': 14.68,\n        '0.05': 16.92,\n        '0.025': 19.02,\n        '0.01': 21.67,\n        '0.005': 23.59\n    },\n    '10': {\n        '0.995': 2.16,\n        '0.99': 2.56,\n        '0.975': 3.25,\n        '0.95': 3.94,\n        '0.9': 4.87,\n        '0.5': 9.34,\n        '0.1': 15.99,\n        '0.05': 18.31,\n        '0.025': 20.48,\n        '0.01': 23.21,\n        '0.005': 25.19\n    },\n    '11': {\n        '0.995': 2.6,\n        '0.99': 3.05,\n        '0.975': 3.82,\n        '0.95': 4.57,\n        '0.9': 5.58,\n        '0.5': 10.34,\n        '0.1': 17.28,\n        '0.05': 19.68,\n        '0.025': 21.92,\n        '0.01': 24.72,\n        '0.005': 26.76\n    },\n    '12': {\n        '0.995': 3.07,\n        '0.99': 3.57,\n        '0.975': 4.4,\n        '0.95': 5.23,\n        '0.9': 6.3,\n        '0.5': 11.34,\n        '0.1': 18.55,\n        '0.05': 21.03,\n        '0.025': 23.34,\n        '0.01': 26.22,\n        '0.005': 28.3\n    },\n    '13': {\n        '0.995': 3.57,\n        '0.99': 4.11,\n        '0.975': 5.01,\n        '0.95': 5.89,\n        '0.9': 7.04,\n        '0.5': 12.34,\n        '0.1': 19.81,\n        '0.05': 22.36,\n        '0.025': 24.74,\n        '0.01': 27.69,\n        '0.005': 29.82\n    },\n    '14': {\n        '0.995': 4.07,\n        '0.99': 4.66,\n        '0.975': 5.63,\n        '0.95': 6.57,\n        '0.9': 7.79,\n        '0.5': 13.34,\n        '0.1': 21.06,\n        '0.05': 23.68,\n        '0.025': 26.12,\n        '0.01': 29.14,\n        '0.005': 31.32\n    },\n    '15': {\n        '0.995': 4.6,\n        '0.99': 5.23,\n        '0.975': 6.27,\n        '0.95': 7.26,\n        '0.9': 8.55,\n        '0.5': 14.34,\n        '0.1': 22.31,\n        '0.05': 25,\n        '0.025': 27.49,\n        '0.01': 30.58,\n        '0.005': 32.8\n    },\n    '16': {\n        '0.995': 5.14,\n        '0.99': 5.81,\n        '0.975': 6.91,\n        '0.95': 7.96,\n        '0.9': 9.31,\n        '0.5': 15.34,\n        '0.1': 23.54,\n        '0.05': 26.3,\n        '0.025': 28.85,\n        '0.01': 32,\n        '0.005': 34.27\n    },\n    '17': {\n        '0.995': 5.7,\n        '0.99': 6.41,\n        '0.975': 7.56,\n        '0.95': 8.67,\n        '0.9': 10.09,\n        '0.5': 16.34,\n        '0.1': 24.77,\n        '0.05': 27.59,\n        '0.025': 30.19,\n        '0.01': 33.41,\n        '0.005': 35.72\n    },\n    '18': {\n        '0.995': 6.26,\n        '0.99': 7.01,\n        '0.975': 8.23,\n        '0.95': 9.39,\n        '0.9': 10.87,\n        '0.5': 17.34,\n        '0.1': 25.99,\n        '0.05': 28.87,\n        '0.025': 31.53,\n        '0.01': 34.81,\n        '0.005': 37.16\n    },\n    '19': {\n        '0.995': 6.84,\n        '0.99': 7.63,\n        '0.975': 8.91,\n        '0.95': 10.12,\n        '0.9': 11.65,\n        '0.5': 18.34,\n        '0.1': 27.2,\n        '0.05': 30.14,\n        '0.025': 32.85,\n        '0.01': 36.19,\n        '0.005': 38.58\n    },\n    '20': {\n        '0.995': 7.43,\n        '0.99': 8.26,\n        '0.975': 9.59,\n        '0.95': 10.85,\n        '0.9': 12.44,\n        '0.5': 19.34,\n        '0.1': 28.41,\n        '0.05': 31.41,\n        '0.025': 34.17,\n        '0.01': 37.57,\n        '0.005': 40\n    },\n    '21': {\n        '0.995': 8.03,\n        '0.99': 8.9,\n        '0.975': 10.28,\n        '0.95': 11.59,\n        '0.9': 13.24,\n        '0.5': 20.34,\n        '0.1': 29.62,\n        '0.05': 32.67,\n        '0.025': 35.48,\n        '0.01': 38.93,\n        '0.005': 41.4\n    },\n    '22': {\n        '0.995': 8.64,\n        '0.99': 9.54,\n        '0.975': 10.98,\n        '0.95': 12.34,\n        '0.9': 14.04,\n        '0.5': 21.34,\n        '0.1': 30.81,\n        '0.05': 33.92,\n        '0.025': 36.78,\n        '0.01': 40.29,\n        '0.005': 42.8\n    },\n    '23': {\n        '0.995': 9.26,\n        '0.99': 10.2,\n        '0.975': 11.69,\n        '0.95': 13.09,\n        '0.9': 14.85,\n        '0.5': 22.34,\n        '0.1': 32.01,\n        '0.05': 35.17,\n        '0.025': 38.08,\n        '0.01': 41.64,\n        '0.005': 44.18\n    },\n    '24': {\n        '0.995': 9.89,\n        '0.99': 10.86,\n        '0.975': 12.4,\n        '0.95': 13.85,\n        '0.9': 15.66,\n        '0.5': 23.34,\n        '0.1': 33.2,\n        '0.05': 36.42,\n        '0.025': 39.36,\n        '0.01': 42.98,\n        '0.005': 45.56\n    },\n    '25': {\n        '0.995': 10.52,\n        '0.99': 11.52,\n        '0.975': 13.12,\n        '0.95': 14.61,\n        '0.9': 16.47,\n        '0.5': 24.34,\n        '0.1': 34.28,\n        '0.05': 37.65,\n        '0.025': 40.65,\n        '0.01': 44.31,\n        '0.005': 46.93\n    },\n    '26': {\n        '0.995': 11.16,\n        '0.99': 12.2,\n        '0.975': 13.84,\n        '0.95': 15.38,\n        '0.9': 17.29,\n        '0.5': 25.34,\n        '0.1': 35.56,\n        '0.05': 38.89,\n        '0.025': 41.92,\n        '0.01': 45.64,\n        '0.005': 48.29\n    },\n    '27': {\n        '0.995': 11.81,\n        '0.99': 12.88,\n        '0.975': 14.57,\n        '0.95': 16.15,\n        '0.9': 18.11,\n        '0.5': 26.34,\n        '0.1': 36.74,\n        '0.05': 40.11,\n        '0.025': 43.19,\n        '0.01': 46.96,\n        '0.005': 49.65\n    },\n    '28': {\n        '0.995': 12.46,\n        '0.99': 13.57,\n        '0.975': 15.31,\n        '0.95': 16.93,\n        '0.9': 18.94,\n        '0.5': 27.34,\n        '0.1': 37.92,\n        '0.05': 41.34,\n        '0.025': 44.46,\n        '0.01': 48.28,\n        '0.005': 50.99\n    },\n    '29': {\n        '0.995': 13.12,\n        '0.99': 14.26,\n        '0.975': 16.05,\n        '0.95': 17.71,\n        '0.9': 19.77,\n        '0.5': 28.34,\n        '0.1': 39.09,\n        '0.05': 42.56,\n        '0.025': 45.72,\n        '0.01': 49.59,\n        '0.005': 52.34\n    },\n    '30': {\n        '0.995': 13.79,\n        '0.99': 14.95,\n        '0.975': 16.79,\n        '0.95': 18.49,\n        '0.9': 20.6,\n        '0.5': 29.34,\n        '0.1': 40.26,\n        '0.05': 43.77,\n        '0.025': 46.98,\n        '0.01': 50.89,\n        '0.005': 53.67\n    },\n    '40': {\n        '0.995': 20.71,\n        '0.99': 22.16,\n        '0.975': 24.43,\n        '0.95': 26.51,\n        '0.9': 29.05,\n        '0.5': 39.34,\n        '0.1': 51.81,\n        '0.05': 55.76,\n        '0.025': 59.34,\n        '0.01': 63.69,\n        '0.005': 66.77\n    },\n    '50': {\n        '0.995': 27.99,\n        '0.99': 29.71,\n        '0.975': 32.36,\n        '0.95': 34.76,\n        '0.9': 37.69,\n        '0.5': 49.33,\n        '0.1': 63.17,\n        '0.05': 67.5,\n        '0.025': 71.42,\n        '0.01': 76.15,\n        '0.005': 79.49\n    },\n    '60': {\n        '0.995': 35.53,\n        '0.99': 37.48,\n        '0.975': 40.48,\n        '0.95': 43.19,\n        '0.9': 46.46,\n        '0.5': 59.33,\n        '0.1': 74.4,\n        '0.05': 79.08,\n        '0.025': 83.3,\n        '0.01': 88.38,\n        '0.005': 91.95\n    },\n    '70': {\n        '0.995': 43.28,\n        '0.99': 45.44,\n        '0.975': 48.76,\n        '0.95': 51.74,\n        '0.9': 55.33,\n        '0.5': 69.33,\n        '0.1': 85.53,\n        '0.05': 90.53,\n        '0.025': 95.02,\n        '0.01': 100.42,\n        '0.005': 104.22\n    },\n    '80': {\n        '0.995': 51.17,\n        '0.99': 53.54,\n        '0.975': 57.15,\n        '0.95': 60.39,\n        '0.9': 64.28,\n        '0.5': 79.33,\n        '0.1': 96.58,\n        '0.05': 101.88,\n        '0.025': 106.63,\n        '0.01': 112.33,\n        '0.005': 116.32\n    },\n    '90': {\n        '0.995': 59.2,\n        '0.99': 61.75,\n        '0.975': 65.65,\n        '0.95': 69.13,\n        '0.9': 73.29,\n        '0.5': 89.33,\n        '0.1': 107.57,\n        '0.05': 113.14,\n        '0.025': 118.14,\n        '0.01': 124.12,\n        '0.005': 128.3\n    },\n    '100': {\n        '0.995': 67.33,\n        '0.99': 70.06,\n        '0.975': 74.22,\n        '0.95': 77.93,\n        '0.9': 82.36,\n        '0.5': 99.33,\n        '0.1': 118.5,\n        '0.05': 124.34,\n        '0.025': 129.56,\n        '0.01': 135.81,\n        '0.005': 140.17\n    }\n};\n\nexport default chiSquaredTable;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/constante/chiSquaredTable.js\n **/","'use strict';\n\nexport default class Perceptron {\n    /**\n     * Create a new Perceptron single-layer [Perceptron Classifier](http://en.wikipedia.org/wiki/Perceptron).\n     *\n     * @param {object} options\n     * @param {number} options.bias\n     * @param {number} options.learningRate\n     */\n    constructor(options = {}) {\n        this._bias = options._bias || 1;\n        this._learningRate = options._learningRate || 0.2;\n        this._weights = [];\n    }\n\n    /**\n     * predict result from input data.\n     *\n     * @param {Array} input - input value to predict [1, 1]\n     * @returns {number}\n     */\n    predict(input) {\n        if (!input) throw new Error('Missing parameter input.');\n\n        let score = 0;\n        this._weights.map((weight, i) => {\n            score += weight * input[i];\n        });\n\n        return (score + this._bias) > 0 ? 1 : 0;\n    }\n\n    /**\n     * train data to adjust weight for future prediction.\n     *\n     * @param {object} data - Contain input - output values { in: [1, 1], out: 1 }\n     * @param {Array} data.in - input data\n     * @param {number} data.out - outputData\n     */\n    train(data) {\n        if (!data.in) throw new Error('Missing parameter input.');\n\n        this._weights = this._weights.length ? this._weights : data.in;\n\n        const prediction = this.predict(data.in);\n\n        if (prediction !== data.out) {\n            const error = data.out - prediction;\n\n            /* Adjust new weight */\n            this._weights = this._weights.map((weight, i) => {\n                weight += this._learningRate * error * data.in[i];\n                return weight;\n            });\n            this._bias += error;\n        }\n\n        return this;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/machineLearning/Perceptron.js\n **/"],"sourceRoot":""}